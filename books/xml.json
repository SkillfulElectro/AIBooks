[
  {
    "n": 1,
    "title": "What Is XML?",
    "math": "Markup languages",
    "note": "This section introduces XML (eXtensible Markup Language) as a markup language and file format for storing and transporting data. It emphasizes that unlike HTML, XML was designed to be self-descriptive and is used to carry data, not to display it."
  },
  {
    "n": 2,
    "title": "XML vs. HTML",
    "math": "Comparative analysis",
    "note": "This lesson clarifies the key difference between XML and HTML. HTML is about displaying information and has a predefined set of tags. XML is about describing and carrying information, and it has no predefined tags; you invent your own tags that are relevant to your data."
  },
  {
    "n": 3,
    "title": "XML vs. JSON",
    "math": "Data interchange formats",
    "note": "This section compares XML to its more modern counterpart, JSON. It explains that while both are used for data interchange, JSON is generally less verbose, easier to parse, and maps more directly to data structures in modern programming languages. The specific use cases where XML is still preferred (e.g., documents, configuration) are discussed."
  },
  {
    "n": 4,
    "title": "XML Syntax: Elements and Tags",
    "math": "XML syntax",
    "note": "This lesson covers the fundamental syntax of XML. It explains that an XML document is a tree of 'elements', each of which consists of a start-tag, content, and an end-tag (e.g., `<book>My Book</book>`). The rule that all elements must have a closing tag is emphasized."
  },
  {
    "n": 5,
    "title": "The XML Prolog and Root Element",
    "math": "Document structure",
    "note": "This section explains that an XML document must have one single 'root' element that contains all other elements. It also introduces the optional XML Prolog `<?xml version=\"1.0\" encoding=\"UTF-8\"?>`, which specifies the XML version and character encoding."
  },
  {
    "n": 6,
    "title": "XML Attributes",
    "math": "Attributes",
    "note": "This lesson introduces attributes as a way to provide additional information about an element. Attributes are key-value pairs placed inside the start-tag of an element (e.g., `<book category=\"fiction\">`). The debate over when to use an attribute versus a child element is discussed."
  },
  {
    "n": 7,
    "title": "Well-Formed XML",
    "math": "Syntactic correctness",
    "note": "This section defines a 'well-formed' XML document. A document is well-formed if it adheres to all the basic XML syntax rules, such as having a single root element, having all tags properly closed and nested, and having attribute values quoted."
  },
  {
    "n": 8,
    "title": "The Need for Validation",
    "math": "Schema validation",
    "note": "This lesson explains that being 'well-formed' is not enough. A 'valid' XML document is one that conforms to a specific set of rules that define the structure and content for that type of document. This is achieved using a schema, like a DTD or XSD."
  },
  {
    "n": 9,
    "title": "Validation with DTD",
    "math": "Document Type Definition (DTD)",
    "note": "This section introduces the Document Type Definition (DTD) as one way to define the legal building blocks of an XML document. It demonstrates the basic syntax for declaring elements, attributes, and entities in a DTD."
  },
  {
    "n": 10,
    "title": "Validation with XML Schema (XSD)",
    "math": "XML Schema Definition (XSD)",
    "note": "This lesson introduces XML Schema as the more powerful and flexible successor to DTDs. It explains that XSD is itself written in XML and provides much richer capabilities, most importantly the ability to define specific data types for elements and attributes."
  },
  {
    "n": 11,
    "title": "Introduction to XPath",
    "math": "XPath",
    "note": "This section introduces XPath (XML Path Language) as a language for finding information in an XML document. It uses a path-like syntax to navigate through elements and attributes in an XML document and select specific nodes."
  },
  {
    "n": 12,
    "title": "XPath Expressions",
    "math": "Path expressions",
    "note": "This lesson demonstrates basic XPath expressions. It covers selecting nodes by name, using `/` to navigate down the tree, `//` to select nodes anywhere in the document, `.` to select the current node, and `..` to select the parent."
  },
  {
    "n": 13,
    "title": "Introduction to XSLT",
    "math": "XSL Transformations (XSLT)",
    "note": "This section introduces XSLT (eXtensible Stylesheet Language Transformations) as a language for transforming XML documents into other formats, such as HTML (for display in a browser), plain text, or another XML structure. It is a declarative, template-based language."
  },
  {
    "n": 14,
    "title": "How XSLT Works",
    "math": "Template matching",
    "note": "This lesson provides a high-level overview of the XSLT process. An XSLT stylesheet contains a set of 'template rules'. The XSLT processor scans the input XML document and, for each node it encounters, it finds the best-matching template in the stylesheet and applies it to produce part of the output."
  },
  {
    "n": 15,
    "title": "XML Namespaces",
    "math": "XML Namespaces",
    "note": "This section explains the purpose of XML Namespaces, which is to avoid element name conflicts when combining XML documents from different sources. A namespace is a unique identifier (typically a URI) that qualifies element and attribute names."
  },
  {
    "n": 16,
    "title": "Parsing XML: DOM and SAX",
    "math": "XML parsing models",
    "note": "This lesson explains how software applications process XML documents. It contrasts the two main parsing models. The DOM (Document Object Model) parser builds a complete in-memory tree of the entire document, which is easy to navigate but memory-intensive. The SAX (Simple API for XML) parser is an event-based parser that reads the document sequentially and is more memory-efficient."
  },
  {
    "n": 17,
    "title": "Parsing XML in Python",
    "math": "XML parsing in Python",
    "note": "This lesson provides a practical example of parsing an XML document using Python's built-in `xml.etree.ElementTree` module. It demonstrates how to parse a file, get the root element, and then iterate through its children to extract data."
  },
  {
    "n": 18,
    "title": "Use Case: RSS Feeds",
    "math": "RSS (Really Simple Syndication)",
    "note": "This section provides a real-world example of XML. It explains that RSS is an XML-based format used by websites and blogs to publish frequently updated content, such as blog posts or news headlines. The basic structure of an RSS feed is shown."
  },
  {
    "n": 19,
    "title": "Use Case: SOAP Web Services",
    "math": "SOAP",
    "note": "This lesson introduces SOAP as a protocol specification for exchanging structured information in the implementation of web services. It explains that SOAP relies heavily on XML to define its message format, consisting of an envelope, a header, and a body."
  },
  {
    "n": 20,
    "title": "Use Case: SVG",
    "math": "Scalable Vector Graphics (SVG)",
    "note": "This final lesson explains that SVG is an XML-based vector image format for two-dimensional graphics. Because it is XML, an SVG image can be indexed, searched, scripted, and compressed, and it can be created and edited with any text editor."
  }
]
