[
  {
    "n": 1,
    "title": "Data, Databases, and DBMS",
    "math": "Data models",
    "note": "This section provides the fundamental definitions. It explains the difference between raw data, a database (an organized collection of data), and a Database Management System (DBMS), which is the software used to create, manage, and interact with a database. The limitations of traditional file-based systems are also discussed."
  },
  {
    "n": 2,
    "title": "Levels of Data Abstraction",
    "math": "Abstraction layers",
    "note": "This section explains the three levels of data abstraction in a DBMS. The Physical Level (lowest) describes how data is actually stored. The Logical Level describes what data is stored and the relationships between data. The View Level (highest) describes only a part of the entire database for a particular user group."
  },
  {
    "n": 3,
    "title": "The Relational Model",
    "math": "Set theory, relational model",
    "note": "This lesson introduces the Relational Model, the most widely used data model for DBMS. It explains the core concepts: a 'Relation' is a table, a 'Tuple' is a row or record, and an 'Attribute' is a column or field. The properties of a relation (e.g., no duplicate tuples) are defined."
  },
  {
    "n": 4,
    "title": "Relational Keys and Integrity Constraints",
    "math": "Key constraints, data integrity",
    "note": "This lesson covers the rules that maintain data accuracy. It defines key types (Primary, Foreign) and explains integrity rules like Entity Integrity (no null primary keys) and Referential Integrity (foreign keys must match a primary key or be null)."
  },
  {
    "n": 5,
    "title": "Relational Algebra",
    "math": "Relational algebra",
    "note": "This section introduces Relational Algebra as a formal, procedural query language. It covers the fundamental operations (SELECT, PROJECT, UNION, JOIN, etc.) that form the theoretical foundation for the SQL language."
  },
  {
    "n": 6,
    "title": "Introduction to SQL (DDL and DML)",
    "math": "Structured Query Language (SQL)",
    "note": "This section introduces SQL as the standard language for relational databases. It covers the Data Definition Language (DDL) for schema definition (`CREATE TABLE`) and the Data Manipulation Language (DML) for data management (`INSERT`, `UPDATE`, `DELETE`)."
  },
  {
    "n": 7,
    "title": "Database Design: The Entity-Relationship (ER) Model",
    "math": "Entity-Relationship modeling",
    "note": "This lesson introduces the ER model as a high-level conceptual data model used for database design. It explains the core components: Entities (real-world objects), Attributes (properties of entities), and Relationships (associations among entities)."
  },
  {
    "n": 8,
    "title": "Mapping ER Diagrams to Relational Tables",
    "math": "Schema mapping",
    "note": "This section provides a practical guide on how to convert a conceptual ER diagram into a set of relational tables. It covers the rules for mapping entities and different types of relationships (one-to-one, one-to-many, many-to-many) into tables with primary and foreign keys."
  },
  {
    "n": 9,
    "title": "Functional Dependencies",
    "math": "Functional dependencies",
    "note": "This lesson introduces the concept of a functional dependency as a constraint between two sets of attributes in a relation. A functional dependency X -> Y means that the value of attribute set X uniquely determines the value of attribute set Y. This is the core concept for understanding normalization."
  },
  {
    "n": 10,
    "title": "Normalization: 1NF, 2NF, and 3NF",
    "math": "Database normalization",
    "note": "This lesson explains Normalization as the process of organizing tables to minimize data redundancy and avoid insertion, update, and deletion anomalies. It details the steps to achieve the first three normal forms (1NF, 2NF, 3NF)."
  },
  {
    "n": 11,
    "title": "Storage and File Structures",
    "math": "Memory hierarchy",
    "note": "This lesson explores how a DBMS stores data on physical media. It discusses the memory hierarchy (disk, main memory, cache), fixed-length vs. variable-length records, and how records are organized into blocks (pages) on disk."
  },
  {
    "n": 12,
    "title": "Indexing Structures: B+ Trees",
    "math": "B+ Trees",
    "note": "This section provides a deeper look at indexing. It introduces the B+ Tree as the most common data structure for implementing indexes in relational databases. It conceptually explains how its balanced, multi-level structure allows for efficient search, insertion, and deletion operations."
  },
  {
    "n": 13,
    "title": "Query Processing and Optimization",
    "math": "Query optimization",
    "note": "This lesson explains what happens inside the DBMS when it receives a SQL query. It covers the main steps: parsing and translation, optimization (where the DBMS chooses the most efficient execution plan), and execution. The importance of cost estimation is highlighted."
  },
  {
    "n": 14,
    "title": "Transaction Management and ACID Properties",
    "math": "ACID properties",
    "note": "This section defines a transaction as a single logical unit of work. It introduces the four critical ACID properties that guarantee transaction reliability: Atomicity (all or nothing), Consistency (preserves database state), Isolation (transactions don't interfere), and Durability (changes persist)."
  },
  {
    "n": 15,
    "title": "Concurrency Control: Lock-Based Protocols",
    "math": "Locking protocols",
    "note": "This lesson explains how a DBMS manages simultaneous operations. It covers locking as a mechanism to control access to data items, discussing lock types (shared, exclusive) and the Two-Phase Locking (2PL) protocol that ensures serializability."
  },
  {
    "n": 16,
    "title": "Database Recovery",
    "math": "Recovery management",
    "note": "This lesson covers the techniques used to recover the database to a consistent state after a failure. It introduces the role of the system log and concepts like write-ahead logging (WAL), checkpoints, and how the log is used to undo or redo transactions after a crash."
  },
  {
    "n": 17,
    "title": "Database Security",
    "math": "Database security",
    "note": "This lesson provides an overview of database security. It covers Discretionary Access Control, where privileges are granted to users, and how the `GRANT` and `REVOKE` SQL commands are used to manage these permissions on database objects."
  },
  {
    "n": 18,
    "title": "Data Warehousing and OLAP",
    "math": "Dimensional modeling",
    "note": "This lesson introduces databases designed for analytics. It contrasts OLTP (transactional) with OLAP (analytical) systems. It explains the purpose of a Data Warehouse and introduces the basics of dimensional modeling, including star and snowflake schemas."
  },
  {
    "n": 19,
    "title": "Introduction to NoSQL Databases",
    "math": "CAP theorem",
    "note": "This lesson introduces the world beyond the relational model. It covers the main categories of NoSQL databases (Document, Key-Value, Column-Family, Graph), explains their motivations (flexible schema, horizontal scalability), and introduces the CAP theorem (Consistency, Availability, Partition Tolerance) to understand their trade-offs."
  },
  {
    "n": 20,
    "title": "Introduction to Distributed Databases",
    "math": "Distributed systems",
    "note": "This final lesson covers the concepts of distributed databases, where data is stored across multiple physical sites. It introduces the core techniques of data replication (copying data) and data fragmentation (splitting data) and discusses the challenges of maintaining consistency and processing queries in a distributed environment."
  }
]
