[
  {
    "n": 1,
    "title": "Introduction to Databases and SQL",
    "math": "Set theory",
    "note": "Introduces the concept of a database and a Relational Database Management System (RDBMS). Explains the role of SQL (Structured Query Language) as the standard language for communicating with relational databases."
  },
  {
    "n": 2,
    "title": "SQL Syntax and Data Types",
    "math": "Syntax analysis",
    "note": "Covers basic SQL syntax and common data types like `VARCHAR`, `INT`, `DECIMAL`, `DATE`, and `BOOLEAN`."
  },
  {
    "n": 3,
    "title": "The SELECT Statement",
    "math": "Set theory",
    "note": "Explains the fundamental `SELECT` statement for retrieving data, including selecting all columns (`*`) or specific columns."
  },
  {
    "n": 4,
    "title": "Filtering with WHERE and ORDER BY",
    "math": "Boolean algebra & Sorting",
    "note": "Covers the `WHERE` clause for filtering records with operators (`=`, `AND`, `OR`) and the `ORDER BY` clause for sorting results (`ASC`, `DESC`)."
  },
  {
    "n": 5,
    "title": "Data Manipulation: INSERT, UPDATE, DELETE",
    "math": "Set theory & Logic",
    "note": "Covers the core DML statements: `INSERT INTO` to add new rows, `UPDATE` to modify existing rows, and `DELETE` to remove rows. Emphasizes the importance of the `WHERE` clause."
  },
  {
    "n": 6,
    "title": "Aggregate Functions (COUNT, SUM, AVG, MIN, MAX)",
    "math": "Statistics",
    "note": "Introduces the common SQL aggregate functions to perform calculations on a set of values and return a single summary value."
  },
  {
    "n": 7,
    "title": "Grouping Data with GROUP BY and HAVING",
    "math": "Data aggregation",
    "note": "Explains the `GROUP BY` clause for summarizing data with aggregate functions, and the `HAVING` clause for filtering those groups."
  },
  {
    "n": 8,
    "title": "Introduction to Joins (INNER, LEFT, RIGHT)",
    "math": "Set theory",
    "note": "Introduces joins for combining rows from multiple tables. Covers `INNER JOIN` for matching records, and `LEFT` & `RIGHT` outer joins for including non-matching records."
  },
  {
    "n": 9,
    "title": "Advanced Joins: FULL OUTER and SELF JOIN",
    "math": "Set theory & Graph theory",
    "note": "Expands on joins, covering `FULL OUTER JOIN` to return all records from both tables, and the `SELF JOIN` technique for querying hierarchical data within a single table."
  },
  {
    "n": 10,
    "title": "Combining Result Sets with UNION",
    "math": "Set theory",
    "note": "Covers the `UNION` operator for combining the result sets of two or more `SELECT` statements. Explains the difference between `UNION` (distinct values) and `UNION ALL` (all values)."
  },
  {
    "n": 11,
    "title": "Conditional Logic with CASE",
    "math": "Conditional logic",
    "note": "Introduces the `CASE` statement, which allows you to add if-then-else logic to your queries to create conditional output in your result set."
  },
  {
    "n": 12,
    "title": "Data Definition: CREATE, ALTER, DROP",
    "math": "Schema definition",
    "note": "Covers Data Definition Language (DDL). Explains `CREATE TABLE` to define tables, `ALTER TABLE` to modify them, and `DROP TABLE` to delete them."
  },
  {
    "n": 13,
    "title": "SQL Constraints (PRIMARY KEY, FOREIGN KEY, etc.)",
    "math": "Data integrity",
    "note": "Provides an overview of SQL constraints used to enforce data integrity, including `NOT NULL`, `UNIQUE`, `PRIMARY KEY`, `FOREIGN KEY`, `CHECK`, and `DEFAULT`."
  },
  {
    "n": 14,
    "title": "Improving Performance with Indexes",
    "math": "Data structures (B-Trees)",
    "note": "Introduces database indexes as a way to speed up data retrieval. Explains how creating an index on a column can dramatically improve query performance."
  },
  {
    "n": 15,
    "title": "Subqueries (Nested Queries)",
    "math": "Set theory",
    "note": "Introduces subqueries, which are `SELECT` statements embedded within another query. Demonstrates their use in the `WHERE`, `FROM`, and `SELECT` clauses."
  },
  {
    "n": 16,
    "title": "Simplifying Queries with Common Table Expressions (CTEs)",
    "math": "Modular arithmetic",
    "note": "Explains Common Table Expressions (CTEs), defined with the `WITH` clause, to create temporary, named result sets that make complex queries more readable and organized."
  },
  {
    "n": 17,
    "title": "Recursive CTEs for Hierarchical Data",
    "math": "Recursion & Graph traversal",
    "note": "Explores a powerful feature of CTEs: recursion. Demonstrates how to use `WITH RECURSIVE` to query hierarchical data structures like organizational charts or bill of materials."
  },
  {
    "n": 18,
    "title": "Introduction to Window Functions",
    "math": "Data analysis",
    "note": "Introduces window functions, which perform calculations across a set of rows related to the current row. Covers the `OVER()` clause and functions like `ROW_NUMBER()`, `RANK()`, and aggregates."
  },
  {
    "n": 19,
    "title": "Advanced Window Functions (LEAD, LAG)",
    "math": "Sequence analysis",
    "note": "Dives deeper into window functions, exploring `LEAD` and `LAG` to access data from subsequent or previous rows. Demonstrates their use for period-over-period comparisons."
  },
  {
    "n": 20,
    "title": "Pivoting Data",
    "math": "Matrix transformation",
    "note": "Explains how to transform data from a row-level format to a columnar format (pivoting). Covers using `CASE` statements with aggregates and the dedicated `PIVOT` operator found in some SQL dialects."
  },
  {
    "n": 21,
    "title": "Using Views to Simplify and Secure Data Access",
    "math": "Abstraction",
    "note": "Explains how to create and use views, which are virtual tables based on a `SELECT` statement. Demonstrates how views can simplify complex queries, encapsulate logic, and enhance security by restricting data access."
  },
  {
    "n": 22,
    "title": "Working with JSON Data",
    "math": "Semi-structured data querying",
    "note": "Introduces capabilities for handling JSON data stored in SQL databases. Covers common functions and operators for extracting values from JSON objects and arrays using path expressions."
  },
  {
    "n": 23,
    "title": "Transactions and Concurrency Control",
    "math": "ACID properties",
    "note": "Covers database transactions, sequences of operations performed as a single logical unit. Introduces `BEGIN TRANSACTION`, `COMMIT`, and `ROLLBACK` for managing data consistency and the ACID properties."
  },
  {
    "n": 24,
    "title": "User Permissions with GRANT and REVOKE (DCL)",
    "math": "Access control",
    "note": "Introduces Data Control Language (DCL). Explains how database administrators use the `GRANT` and `REVOKE` commands to manage user permissions for actions like `SELECT`, `INSERT`, `UPDATE` on database objects."
  },
  {
    "n": 25,
    "title": "Introduction to Database Normalization",
    "math": "Database design theory",
    "note": "Provides a conceptual introduction to normalization. Explains the importance of organizing tables to minimize data redundancy and improve data integrity, focusing on the first three normal forms (1NF, 2NF, 3NF)."
  }
]
