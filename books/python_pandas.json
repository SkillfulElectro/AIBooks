[
  {
    "n": 1,
    "title": "Introduction to Pandas",
    "math": "Data analysis libraries",
    "note": "This section introduces Pandas as a fast, powerful, flexible, and easy-to-use open-source data analysis and manipulation tool, built on top of the Python programming language. It explains its central role in the Python data science ecosystem for cleaning, transforming, and analyzing data."
  },
  {
    "n": 2,
    "title": "The Core Data Structures: `Series` and `DataFrame`",
    "math": "Data structures",
    "note": "This lesson introduces the two primary data structures in Pandas. A `Series` is a one-dimensional labeled array capable of holding any data type. A `DataFrame` is a two-dimensional labeled data structure with columns of potentially different types, similar to a spreadsheet, a SQL table, or a dictionary of Series objects."
  },
  {
    "n": 3,
    "title": "Creating a `Series`",
    "math": "Series creation",
    "note": "This section demonstrates how to create a Pandas `Series` from various inputs, including a Python list and a NumPy array. It highlights the components of a Series: the data itself and the associated 'index', which provides labels for the data."
  },
  {
    "n": 4,
    "title": "Creating a `DataFrame`",
    "math": "DataFrame creation",
    "note": "This lesson covers the most common ways to create a `DataFrame`. It focuses on creating a DataFrame from a dictionary of lists (where each key becomes a column name) and from a list of dictionaries."
  },
  {
    "n": 5,
    "title": "Reading Data from a CSV File",
    "math": "Data import",
    "note": "This section introduces the most common way to get data into Pandas. It demonstrates the `pd.read_csv()` function for reading data from a comma-separated values (CSV) file into a DataFrame. Key parameters like `sep` and `header` are briefly discussed."
  },
  {
    "n": 6,
    "title": "Inspecting a DataFrame",
    "math": "Data inspection",
    "note": "This lesson covers the essential first steps after loading data. It demonstrates the methods used to get a quick overview of a DataFrame: `.head()` (to see the first few rows), `.info()` (to see data types and non-null counts), and `.describe()` (to get summary statistics for numerical columns)."
  },
  {
    "n": 7,
    "title": "Selecting Columns",
    "math": "Column selection",
    "note": "This section explains how to select one or more columns from a DataFrame. It demonstrates using square bracket notation with a single column name to get a Series, and with a list of column names to get a new DataFrame."
  },
  {
    "n": 8,
    "title": "Row Selection with `.loc` and `.iloc`",
    "math": "Row indexing",
    "note": "This crucial lesson contrasts the two main methods for selecting rows. `.loc` is label-based, meaning you select rows based on their index labels. `.iloc` is integer-position-based, meaning you select rows based on their integer position (from 0 to length-1)."
  },
  {
    "n": 9,
    "title": "Conditional Selection (Boolean Indexing)",
    "math": "Boolean indexing",
    "note": "This section covers how to filter a DataFrame based on conditions. It demonstrates how to create a boolean Series (e.g., `df['age'] > 30`) and then use that Series inside square brackets to select only the rows from the DataFrame where the condition is true."
  },
  {
    "n": 10,
    "title": "Handling Missing Data",
    "math": "Missing data handling",
    "note": "This lesson explains how to deal with missing values, which are represented as `NaN` in Pandas. It covers the `.isnull()` method to detect missing data, the `.dropna()` method to remove rows or columns with missing data, and the `.fillna()` method to replace missing data with a specific value."
  },
  {
    "n": 11,
    "title": "The `groupby()` Method",
    "math": "Group-by operations",
    "note": "This section introduces the powerful `groupby()` method, which is used to implement the 'split-apply-combine' pattern. It explains how `groupby()` splits the DataFrame into groups based on some criteria, allows you to apply a function (like an aggregation) to each group independently, and then combines the results into a new data structure."
  },
  {
    "n": 12,
    "title": "Aggregation",
    "math": "Data aggregation",
    "note": "This lesson demonstrates what to do after a `groupby()` operation. It shows how to apply aggregate functions like `.sum()`, `.mean()`, `.count()`, and `.max()` to the grouped data to calculate summary statistics for each group."
  },
  {
    "n": 13,
    "title": "Combining DataFrames: `pd.concat()`",
    "math": "Concatenation",
    "note": "This section covers how to combine DataFrames. It focuses on `pd.concat()`, which is used to stack multiple DataFrames on top of each other (row-wise) or side-by-side (column-wise)."
  },
  {
    "n": 14,
    "title": "Combining DataFrames: `pd.merge()`",
    "math": "Database-style joins",
    "note": "This lesson introduces `pd.merge()` as the Pandas equivalent of a SQL join. It allows you to combine two DataFrames based on the values in one or more common columns (keys). The different types of joins (`inner`, `left`, `right`, `outer`) are explained."
  },
  {
    "n": 15,
    "title": "Applying Functions with `.apply()`",
    "math": "Function application",
    "note": "This section demonstrates the `.apply()` method, a flexible way to apply a function along an axis of a DataFrame. This is useful for performing complex custom transformations that are not covered by built-in Pandas functions."
  },
  {
    "n": 16,
    "title": "Sorting Data",
    "math": "Data sorting",
    "note": "This lesson covers how to sort a DataFrame. It explains `.sort_index()` for sorting by the index labels and `.sort_values()` for sorting by the values in one or more columns."
  },
  {
    "n": 17,
    "title": "Working with Text Data",
    "math": "String operations",
    "note": "This section introduces the `.str` accessor, which allows you to apply Python's built-in string methods to an entire Series of text data. It demonstrates common operations like `.str.lower()`, `.str.contains()`, and `.str.split()`."
  },
  {
    "n": 18,
    "title": "Working with Time Series Data",
    "math": "Time series analysis",
    "note": "This lesson provides an introduction to Pandas' powerful time series capabilities. It covers converting columns to a `datetime` data type, setting a `DatetimeIndex`, and performing time-based slicing and resampling."
  },
  {
    "n": 19,
    "title": "Plotting with Pandas",
    "math": "Data visualization",
    "note": "This section explains the convenient integration between Pandas and the Matplotlib library. It demonstrates how to use the `.plot()` accessor directly on a DataFrame or Series to quickly generate various types of plots, like line plots, bar charts, and histograms."
  },
  {
    "n": 20,
    "title": "Writing Data to a File",
    "math": "Data export",
    "note": "This final lesson covers how to save your processed data. It demonstrates the `.to_csv()` method for writing a DataFrame to a CSV file, and briefly mentions other methods like `.to_excel()` and `.to_json()` for saving to other formats."
  }
]
