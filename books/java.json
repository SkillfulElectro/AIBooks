[
  {
    "n": 1,
    "title": "Introduction to Java and the JVM",
    "math": "Virtual machines",
    "note": "Explain the core concepts of the Java Virtual Machine (JVM), Java Runtime Environment (JRE), and Java Development Kit (JDK). Guide the installation of a recent JDK. Demonstrate compiling and running a 'Hello, World!' program from the command-line using `javac` and `java`."
  },
  {
    "n": 2,
    "title": "Variables and Primitive Data Types",
    "math": "Number systems",
    "note": "Introduce Java's eight primitive data types (byte, short, int, long, float, double, char, boolean). Explain how to declare and initialize variables and discuss standard naming conventions (camelCase)."
  },
  {
    "n": 3,
    "title": "Operators and Expressions",
    "math": "Arithmetic, Boolean algebra",
    "note": "Cover arithmetic operators, assignment operators, relational operators (e.g., `==`, `>`), and logical operators (&&, ||, !). Explain operator precedence and type casting."
  },
  {
    "n": 4,
    "title": "Working with Strings",
    "math": "Sequences",
    "note": "Introduce the `String` class for handling text. Demonstrate string creation, concatenation, and common methods like `length()`, `charAt()`, `toLowerCase()`, `toUpperCase()`, and `equals()`."
  },
  {
    "n": 5,
    "title": "Getting User Input with `Scanner`",
    "math": "Input/output models",
    "note": "Teach how to read input from the console using the `java.util.Scanner` class. Demonstrate creating a Scanner object and using methods like `nextLine()` for strings and `nextInt()` for integers."
  },
  {
    "n": 6,
    "title": "Control Flow: Conditionals (if, switch)",
    "math": "Conditional logic",
    "note": "Introduce conditional branching using `if`, `else if`, `else` statements. Also cover the `switch` statement for checking a variable against multiple constant values."
  },
  {
    "n": 7,
    "title": "Control Flow: Loops (for, while, do-while)",
    "math": "Iteration",
    "note": "Teach how to repeat blocks of code. Cover the `for` loop for iterating a known number of times, the `while` loop for iterating as long as a condition is true, and the `do-while` loop."
  },
  {
    "n": 8,
    "title": "Arrays",
    "math": "Vector notation",
    "note": "Introduce one-dimensional arrays as fixed-size collections of elements of the same type. Cover syntax for declaring, instantiating, and initializing arrays, and accessing elements using zero-based indexing."
  },
  {
    "n": 9,
    "title": "Introduction to Object-Oriented Programming (OOP)",
    "math": "Type theory",
    "note": "Introduce the fundamental concepts of OOP. Define a class as a blueprint and an object as an instance of a class. Demonstrate creating a simple `Car` class with fields (instance variables) and methods (behaviors)."
  },
  {
    "n": 10,
    "title": "Classes and Objects in Practice",
    "math": "Object instantiation",
    "note": "Teach how to create objects using the `new` keyword, how to call methods on an object using dot notation, and the purpose of constructors for initializing an object's state. Introduce the `this` keyword."
  },
  {
    "n": 11,
    "title": "OOP: Encapsulation",
    "math": "Information hiding",
    "note": "Introduce encapsulation. Explain the `public` and `private` access modifiers to control visibility. Demonstrate making fields `private` and providing `public` getter and setter methods."
  },
  {
    "n": 12,
    "title": "OOP: Inheritance",
    "math": "Set theory (subsets)",
    "note": "Introduce inheritance for code reuse. Explain the `extends` keyword to create a subclass that inherits from a superclass. Cover method overriding with the `@Override` annotation."
  },
  {
    "n": 13,
    "title": "OOP: Polymorphism",
    "math": "Substitution principle",
    "note": "Explain polymorphism, the ability of an object to take on many forms. Demonstrate creating objects of a subclass but referencing them using a superclass variable (e.g., `Animal myPet = new Dog();`)."
  },
  {
    "n": 14,
    "title": "OOP: Abstraction (Abstract Classes and Interfaces)",
    "math": "Abstract algebra",
    "note": "Introduce abstraction. Explain abstract classes and methods. Define an interface as a contract that specifies methods a class must implement. Contrast the two concepts."
  },
  {
    "n": 15,
    "title": "The `static` and `final` Keywords",
    "math": "Class-level vs instance-level properties",
    "note": "Explain the `static` keyword for members that belong to the class itself. Explain the three uses of the `final` keyword: for constant variables, to prevent method overriding, and to prevent inheritance."
  },
  {
    "n": 16,
    "title": "The `Object` Class",
    "math": "Identity and equality",
    "note": "Explain that all classes in Java implicitly inherit from `java.lang.Object`. Discuss the importance of overriding the `toString()`, `equals()`, and `hashCode()` methods."
  },
  {
    "n": 17,
    "title": "Introduction to the Collections Framework",
    "math": "Abstract data types",
    "note": "Provide an overview of the Java Collections Framework. Introduce the primary interfaces: `List` (ordered), `Set` (unique), and `Map` (key-value). Introduce generics for type safety (e.g., `List<String>`)."
  },
  {
    "n": 18,
    "title": "Collections: `ArrayList` and `LinkedList`",
    "math": "Dynamic arrays vs. linked lists",
    "note": "Teach the `ArrayList` class as a resizable array and the `LinkedList` class. Demonstrate common `List` operations (`add`, `get`, `remove`) and discuss the performance trade-offs between the two implementations."
  },
  {
    "n": 19,
    "title": "Collections: `HashMap` and `HashSet`",
    "math": "Hash functions",
    "note": "Introduce the `HashMap` class for key-value pairs and the `HashSet` class for storing unique elements. Explain how they use hashing for efficient O(1) average time complexity for basic operations."
  },
  {
    "n": 20,
    "title": "Exception Handling",
    "math": "Error handling models",
    "note": "Introduce Java's exception handling mechanism. Differentiate between checked and unchecked exceptions. Demonstrate using `try-catch-finally` blocks to handle exceptions gracefully and the `throw`/`throws` keywords."
  },
  {
    "n": 21,
    "title": "The `Optional` Type",
    "math": "Option types",
    "note": "A lesson on using `java.util.Optional` to handle potentially missing values. It explains how this approach can lead to cleaner, more expressive code that avoids `NullPointerException`s compared to traditional null checks."
  },
  {
    "n": 22,
    "title": "File I/O",
    "math": "I/O streams",
    "note": "Teach how to read from and write to text files using classes like `java.io.File`, `java.util.Scanner`, and `java.io.PrintWriter`. Introduce the try-with-resources statement for automatic resource management."
  },
  {
    "n": 23,
    "title": "Packages and `import`",
    "math": "Namespace theory",
    "note": "Explain how packages are used to organize classes into namespaces. Demonstrate creating a class in a specific package and using the `import` statement to access classes from other packages."
  },
  {
    "n": 24,
    "title": "Enumerations (Enums)",
    "math": "Finite sets",
    "note": "Introduce enums as a special type that represents a fixed set of constants. Demonstrate how to define and use an enum in variables and `switch` statements for more readable and type-safe code."
  },
  {
    "n": 25,
    "title": "Generics",
    "math": "Parametric polymorphism",
    "note": "Explain the purpose of generics for creating classes, interfaces, and methods that can operate on different data types while providing compile-time type safety. Demonstrate creating a simple generic class."
  },
  {
    "n": 26,
    "title": "Modern Java: Records",
    "math": "Immutable data carriers",
    "note": "A lesson on the `record` keyword (Java 16+). It explains how records provide a concise syntax for creating immutable data carrier classes, automatically generating constructors, accessors, `equals()`, `hashCode()`, and `toString()`."
  },
  {
    "n": 27,
    "title": "Modern Java: Sealed Classes",
    "math": "Algebraic data types",
    "note": "A lesson on `sealed` classes and interfaces (Java 17+). It explains how this feature allows a developer to explicitly declare which classes are permitted to extend or implement a sealed type, providing more control over inheritance."
  },
  {
    "n": 28,
    "title": "Functional Programming: Lambda Expressions",
    "math": "Lambda calculus",
    "note": "Introduce lambda expressions as a concise way to represent an anonymous function. Explain the syntax and show how they can be used to provide an implementation for a functional interface (e.g., `Runnable`, `Comparator`)."
  },
  {
    "n": 29,
    "title": "Functional Programming: The Streams API",
    "math": "Sequence processing",
    "note": "Introduce the `java.util.stream` API for processing sequences of elements. Explain the pipeline of intermediate operations (`filter`, `map`) and a terminal operation (`collect`, `forEach`) to perform complex data processing in a declarative style."
  },
  {
    "n": 30,
    "title": "Concurrency: Threads and `Runnable`",
    "math": "Concurrency theory",
    "note": "Introduce the basics of multithreading. Demonstrate the two primary ways to create a new thread: by extending the `Thread` class and by implementing the `Runnable` interface. Show how to start the thread using `.start()`."
  },
  {
    "n": 31,
    "title": "Concurrency: Synchronization",
    "math": "Mutual exclusion",
    "note": "Explain race conditions that can occur with multiple threads. Introduce the `synchronized` keyword to create a monitor lock on a method or a block of code, ensuring that only one thread can execute that code at a time."
  },
  {
    "n": 32,
    "title": "Advanced Concurrency: Executors and Futures",
    "math": "Asynchronous computation",
    "note": "A lesson on the high-level concurrency utilities in `java.util.concurrent`. It will introduce the Executor Framework for managing thread pools and `Future` / `CompletableFuture` for handling the results of asynchronous computations."
  },
  {
    "n": 33,
    "title": "JDBC: Connecting to and Querying Databases",
    "math": "Relational algebra",
    "note": "Introduce Java Database Connectivity (JDBC). Explain how to establish a connection, execute queries using `PreparedStatement` to prevent SQL injection, and process the results from a `ResultSet`."
  },
  {
    "n": 34,
    "title": "Unit Testing with JUnit 5",
    "math": "Formal verification",
    "note": "Introduce unit testing with the JUnit 5 framework. Demonstrate how to write a test class, use annotations like `@Test`, and use assertion methods like `assertEquals()` and `assertTrue()` to verify code correctness."
  },
  {
    "n": 35,
    "title": "Build Automation with Maven",
    "math": "Dependency graph theory",
    "note": "Provide an introduction to Apache Maven as a build automation and dependency management tool. Explain the structure of the `pom.xml` file, focusing on how to declare project metadata and add external library dependencies."
  }
]
