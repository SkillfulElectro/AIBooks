[
  {
    "n": 1,
    "title": "Introducing GoLang: History, Use Cases, and Setup",
    "math": "None",
    "note": "Introduce learners to GoLang, exploring its origin at Google, current industrial adoption (cloud, microservices, backend systems), and key features that set it apart from Python, Java, and C++. Guide students through installing Go, setting up a development environment, and compiling their first program to ensure familiarity with Go's workflow and community-driven resources."
  },
  {
    "n": 2,
    "title": "Go Syntax Basics: Variables, Types, and Expressions",
    "math": "Algebra and Data Domains",
    "note": "Teach Go's variable declaration, zero values, type inference, and scope rules. Connect to algebraic concepts, demonstrating assignment, replacement, and evaluation of expressions. Practice creating integer, float, and string variables; show type conversions and formatted I/O, giving students foundation in domain/value reasoning crucial to static languages."
  },
  {
    "n": 3,
    "title": "Control Structures: Conditionals and Boolean Logic",
    "math": "Logic and Truth Tables",
    "note": "Cover 'if', 'else', and 'switch' statements in Go, mapping directly to principles of propositional logic. Use concrete truth tables and simple code to illustrate flow control and branching, reinforcing how logical reasoning translates into program behavior and how Boolean operators work at both mathematical and code levels."
  },
  {
    "n": 4,
    "title": "Loops and Iteration: For and Range",
    "math": "Sequences and Summation",
    "note": "Demonstrate Go's unified 'for' loop (traditional, infinite, and 'range'-based) for iterating over arrays, slices, and strings. Use mathematical sequences and summation as real-world analogies, implementing both summing elements and producing Fibonacci or other iterative series, highlighting the relationship between code and mathematical process."
  },
  {
    "n": 5,
    "title": "Functions, Parameters, and Return Values",
    "math": "Function Theory",
    "note": "Teach how to define and invoke functions in Go, pass parameters (by value and by reference), return single or multiple results, and understand scope. Relate to mathematical function mappings (domain, codomain, mapping rules) to reinforce both abstraction and application in code, laying a foundation for modular, testable programming."
  },
  {
    "n": 6,
    "title": "Pointers and Memory Management",
    "math": "Graphs and Reference Models",
    "note": "Introduce pointers for referencing memory addresses, highlighting syntax and practical implications (variable vs pointer semantics). Use a graph model to illustrate how memory is managed, how variables are connected, and how Go's garbage-collected model impacts program allocation and performance."
  },
  {
    "n": 7,
    "title": "Arrays and Slices: Data Structures and Indexing",
    "math": "Indexing, Sets, and Sequences",
    "note": "Explain the static and flexible nature of arrays and slices in Go. Demonstrate indexing, slicing, appending, and len/cap operations. Use sets and sequence mathematics to model how elements are accessed and mutated, giving students a concrete sense of why Go's slices are preferred for most dynamic data manipulation tasks."
  },
  {
    "n": 8,
    "title": "Maps and Hash Tables",
    "math": "Hash Functions and Lookup Efficiency",
    "note": "Teach Go's map structure, showing key-value associations, insertion, lookup, and deletion. Discuss hash functions and the math behind efficient lookup and collision resolution. Relate this to real-world dictionaries and data grouping, giving hands-on practice with dynamic data sets."
  },
  {
    "n": 9,
    "title": "Structs: Data Modeling and Composite Types",
    "math": "Set Theory and Data Modeling",
    "note": "Cover struct declaration, initialization, field access, and nesting. Emphasize the use of structs for modeling real-world data (such as a 'Person' or 'Order'). Apply set theory concepts to explain how grouping attributes in a struct forms the basis of compositional design, supporting extensible programs."
  },
  {
    "n": 10,
    "title": "Interfaces and Polymorphism",
    "math": "Type Theory and Abstract Algebra",
    "note": "Introduce interfaces and implicit implementation in Go, showing polymorphic design without traditional inheritance. Relate to abstract algebra by modeling how types satisfy interface contracts, which acts as a set of axioms, enabling advanced composition and modularity in larger programs."
  },
  {
    "n": 11,
    "title": "Error Handling and Panic/Recover",
    "math": "Logical Trees and Exception Paths",
    "note": "Explain Go's preference for explicit error returns, distinguishing normal and exceptional flows using logical tree diagrams. Cover panic and recover mechanisms for critical failures, comparing to other languages' exception handling, and reinforce structured error pathways using code and math-driven testing."
  },
  {
    "n": 12,
    "title": "Concurrency: Goroutines and Channels",
    "math": "Scheduling, Graphs, and Parallel Optimization",
    "note": "Teach Go's goroutines for lightweight concurrency, introducing channels for safe communication. Use scheduling and graph theory to show how tasks progress and dependencies are managed, culminating in practical patterns like worker pools and fan-out/fan-in concurrency."
  },
  {
    "n": 13,
    "title": "File and Directory I/O",
    "math": "Streams and Data Representation",
    "note": "Cover reading and writing files and directories using Go's 'os' and 'io/ioutil' packages. Discuss file streams, buffers, and encoding/decoding basics, relating to how data is structured and managed in external storage, and practice with small exercises parsing text or log files."
  },
  {
    "n": 14,
    "title": "Working with JSON: Parsing and Encoding",
    "math": "Tree Structures and Key-Value Mapping",
    "note": "Demonstrate Go's 'encoding/json' package to unmarshal and marshal JSON data into structs and maps. Practice with nested JSON and dynamic fields. Discuss tree structures and key-value operations in mathematics, which provides a formal basis for many API integrations and full-stack development requirements."
  },
  {
    "n": 15,
    "title": "Unit Testing and Benchmarking",
    "math": "Statistics, Proof, and Optimization",
    "note": "Teach Go's 'testing' package, writing basic and table-driven tests, and analyzing code correctness as a formal proof. Cover benchmarks and profiles, and interpret statistical output (mean, variance, distribution) to optimize code. Emphasize test-first mindset and reproducibility in software construction."
  },
  {
    "n": 16,
    "title": "HTTP Servers and RESTful APIs in Go",
    "math": "Graph Traversal and Protocol Modeling",
    "note": "Guide students through building HTTP servers with Go's 'net/http' package, routing, request/response patterns, and JSON-based APIs. Use graph traversal models to represent request flows, endpoints, and resource relationships, consolidating practical networking with mathematical reasoning."
  },
  {
    "n": 17,
    "title": "Managing Dependencies and Go Modules",
    "math": "Set Theory and Modular Design",
    "note": "Introduce Go's module system, dependency management with 'go mod', and principles of semantic versioning. Apply set theory to show how modules encapsulate functionality and how import trees map to program structure."
  },
  {
    "n": 18,
    "title": "Performance Profiling and Optimization",
    "math": "Algorithmic Complexity and Statistics",
    "note": "Show how to use Go's profiling tools ('pprof', trace) to measure CPU and memory usage. Link findings to algorithmic complexity (Big-O notation) and statistical metrics, helping students diagnose bottlenecks and apply efficient algorithms in practice."
  },
  {
    "n": 19,
    "title": "Go and Cloud-Native Ecosystem: Docker, Kubernetes, and Beyond",
    "math": "Graphs (Topology) and Discrete Structures",
    "note": "Introduce using Go to deploy microservices, build Docker containers, and interact with Kubernetes APIs. Relate to discrete mathematical models of resource allocation, service discovery, and dependency graphs, showing Go's role in modern orchestration and scalability."
  },
  {
    "n": 20,
    "title": "Capstone Project: Real-World Application and Reflection",
    "math": "Synthesis and Algorithm Design",
    "note": "Guide students through designing and implementing a multi-component Go application (eg, REST API service with concurrency and tests). Emphasize integrating all previously learned constructs, reflecting on algorithmic choices, performance tradeoffs, and testability. Assess with a real-world rubric that measures coding skills, mathematical thinking, and software design."
  }
]
