[
  {
    "n": 1,
    "title": "Introduction to Go",
    "math": "None",
    "note": "Introduce Go, its origin at Google, and its design philosophy emphasizing simplicity, concurrency, and performance. Cover key use cases like cloud services, CLI tools, and DevOps. Guide students through installing Go and setting up their environment."
  },
  {
    "n": 2,
    "title": "Go Syntax Basics: Variables, Types, and Control Structures",
    "math": "Logic and Algebra",
    "note": "Cover Go's fundamental syntax: variable declaration (`var`, `:=`), basic types (`int`, `string`, `bool`), and control flow statements (`if`, `else`, `switch`, and the unified `for` loop). Emphasize Go's strict typing and clean syntax."
  },
  {
    "n": 3,
    "title": "Composite Types: Arrays, Slices, and Maps",
    "math": "Data Structures",
    "note": "Explain Go's core composite data structures. Cover fixed-size arrays, the more flexible and powerful slice type (including `len`, `cap`, and `append`), and maps for key-value storage. Demonstrate their declaration and common operations."
  },
  {
    "n": 4,
    "title": "Structs: Creating Custom Data Types",
    "math": "Set Theory and Data Modeling",
    "note": "Cover struct declaration, initialization, and field access. Emphasize the use of structs for modeling custom data types by grouping related fields together. This is the foundation for building complex data structures in Go."
  },
  {
    "n": 5,
    "title": "Functions, Parameters, and Multiple Return Values",
    "math": "Function Theory",
    "note": "Teach how to define and invoke functions in Go. Cover passing parameters (by value), variadic functions, and Go's idiomatic use of multiple return values, especially for returning a result alongside an error."
  },
  {
    "n": 6,
    "title": "Pointers",
    "math": "Reference Models",
    "note": "Introduce pointers for referencing memory addresses. Explain the `&` (address of) and `*` (dereference) operators. Discuss when to use pointers (e.g., to modify a function argument) versus value types."
  },
  {
    "n": 7,
    "title": "Methods and Interfaces",
    "math": "Type Theory and Abstract Algebra",
    "note": "Explain how to define methods on structs. Introduce interfaces as collections of method signatures. Cover Go's unique implicit implementation of interfaces, a key feature for writing decoupled, composable code."
  },
  {
    "n": 8,
    "title": "Error Handling",
    "math": "Logical Trees and Exception Paths",
    "note": "Explain Go's idiomatic approach to error handling, which involves functions returning an `error` value. Contrast this with the exception-based systems of other languages and emphasize the importance of checking for errors explicitly."
  },
  {
    "n": 9,
    "title": "Concurrency: Goroutines",
    "math": "Parallel computing",
    "note": "Introduce goroutines as Go's lightweight approach to concurrency. Demonstrate how to start a new goroutine using the `go` keyword to run a function concurrently with the rest of the program."
  },
  {
    "n": 10,
    "title": "Concurrency: Channels",
    "math": "Communicating Sequential Processes (CSP)",
    "note": "Introduce channels as the primary way for goroutines to communicate and synchronize. Explain how to create channels with `make`, send values with `<-`, and receive values. Emphasize the principle: 'Do not communicate by sharing memory; instead, share memory by communicating.'"
  },
  {
    "n": 11,
    "title": "Advanced Concurrency: `select` and `sync`",
    "math": "Synchronization primitives",
    "note": "This lesson covers more advanced concurrency patterns. It introduces the `select` statement for working with multiple channels. It also covers the `sync` package, explaining when to use primitives like `sync.Mutex` and `sync.WaitGroup` for more traditional shared-memory concurrency."
  },
  {
    "n": 12,
    "title": "The `context` Package",
    "math": "Cancellation and propagation",
    "note": "A crucial lesson on using the `context` package for managing deadlines, cancellation signals, and request-scoped values across API boundaries and between goroutines. This is essential for writing reliable and robust network services."
  },
  {
    "n": 13,
    "title": "Packages and Modules",
    "math": "Dependency management",
    "note": "Explain how code is organized into packages and how to manage dependencies using Go Modules. Cover the `go.mod` and `go.sum` files and the basic commands like `go get` and `go mod tidy`."
  },
  {
    "n": 14,
    "title": "Generics",
    "math": "Parametric polymorphism",
    "note": "A dedicated lesson on generics, introduced in Go 1.18. It explains how to write functions and data structures with type parameters, allowing them to work with any of a set of types, which reduces code duplication."
  },
  {
    "n": 15,
    "title": "Working with JSON",
    "math": "Data serialization",
    "note": "Demonstrate Go's `encoding/json` package to marshal Go structs into JSON and unmarshal JSON data back into structs. Cover the use of struct field tags to customize the JSON output."
  },
  {
    "n": 16,
    "title": "File I/O",
    "math": "Data streams",
    "note": "Cover reading and writing files using Go's `os` and `io` packages. Discuss file streams, buffers, and the use of `defer` to ensure files are closed properly."
  },
  {
    "n": 17,
    "title": "Building an HTTP Server",
    "math": "Protocol Modeling",
    "note": "Guide students through building a simple web server with Go's standard `net/http` package. Cover setting up request handlers, routing, and serving basic HTTP responses."
  },
  {
    "n": 18,
    "title": "Unit Testing and Benchmarking",
    "math": "Formal verification",
    "note": "Teach Go's built-in `testing` package. Cover writing basic unit tests with `t.Run()` for subtests, and creating benchmarks to measure code performance."
  },
  {
    "n": 19,
    "title": "Advanced Testing: Fuzzing",
    "math": "Randomized testing",
    "note": "A lesson on fuzz testing, a modern testing technique now built into the Go toolchain. It explains how fuzzing automatically generates inputs to your functions to find edge cases and bugs that normal unit tests might miss."
  },
  {
    "n": 20,
    "title": "Reflection",
    "math": "Metaprogramming",
    "note": "A lesson introducing the concepts of reflection in Go. It explains how to use the `reflect` package to inspect the types and values of variables at runtime, while also discussing the trade-offs in terms of performance and code clarity."
  },
  {
    "n": 21,
    "title": "Calling C code with `cgo`",
    "math": "Foreign function interface",
    "note": "An introduction to `cgo`, the facility for calling C libraries from Go code. This lesson conceptually covers how it works and its use cases, such as integrating with existing C libraries or for performance-critical systems programming."
  },
  {
    "n": 22,
    "title": "Performance Profiling with `pprof`",
    "math": "Statistical profiling",
    "note": "Show how to use Go's built-in profiling tools (`pprof`) to measure and visualize CPU and memory usage, helping developers diagnose performance bottlenecks in their applications."
  }
]
