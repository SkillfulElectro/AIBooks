[
  {
    "n": 1,
    "title": "Introduction to VB.NET and the Modern .NET Ecosystem",
    "math": "Programming language ecosystems",
    "note": "Introduces VB.NET as a modern, object-oriented language. Explains the evolution from the legacy .NET Framework to the modern, cross-platform .NET (Core, .NET 6+) and introduces Visual Studio as the primary IDE."
  },
  {
    "n": 2,
    "title": "Creating a Console App and Basic Syntax",
    "math": "Variable declaration",
    "note": "A practical guide to creating a '.NET Console App' project. Covers `Dim` for variables, common data types (`Integer`, `String`, `Boolean`), and writing to the console with `Console.WriteLine()`."
  },
  {
    "n": 3,
    "title": "Control Flow: `If`, `Select Case`, and Loops",
    "math": "Conditional logic & Iteration",
    "note": "Covers the fundamental control flow statements: `If...Then...Else` for conditions, `Select Case` for multi-way branching, and loops like `For...Next` and `Do...Loop` for iteration."
  },
  {
    "n": 4,
    "title": "Procedures and Functions (`Sub`, `Function`)",
    "math": "Procedures and functions",
    "note": "Explains how to create reusable code blocks. Contrasts a `Sub` (performs a task) with a `Function` (performs a task and returns a value). Also covers passing parameters `ByVal` vs. `ByRef`."
  },
  {
    "n": 5,
    "title": "Exception Handling with `Try...Catch`",
    "math": "Exception handling",
    "note": "Introduces structured exception handling. Explains how to use a `Try...Catch...Finally` block to gracefully handle runtime errors and prevent application crashes."
  },
  {
    "n": 6,
    "title": "Introduction to Object-Oriented Programming (OOP)",
    "math": "Object-Oriented Programming",
    "note": "Introduces core OOP concepts. Explains how to define a `Class` as a blueprint for an object, and how to create an instance of that class using the `New` keyword."
  },
  {
    "n": 7,
    "title": "Class Members: Properties and Methods",
    "math": "Class members",
    "note": "Covers defining class members. `Properties` (`Get`/`Set`) are used to encapsulate data, and `Methods` (`Sub`/`Function`) are used to define the behavior of an object."
  },
  {
    "n": 8,
    "title": "Inheritance",
    "math": "Inheritance",
    "note": "Explains inheritance, where a new class (derived class) can inherit members from an existing class (base class) using the `Inherits` keyword. This promotes code reuse."
  },
  {
    "n": 9,
    "title": "Interfaces and Polymorphism",
    "math": "Interfaces and polymorphism",
    "note": "Introduces `Interface` as a contract that defines a set of methods and properties. A class can `Implement` an interface, which is a key to achieving polymorphism and loosely-coupled design."
  },
  {
    "n": 10,
    "title": "Introduction to Generics",
    "math": "Generics",
    "note": "Explains how to use and create generic classes and methods that can work with any data type. Focuses on the most common generic collection, `List(Of T)`."
  },
  {
    "n": 11,
    "title": "Managing Packages with NuGet",
    "math": "Dependency management",
    "note": "Introduces the NuGet package manager, the standard way to add third-party libraries and frameworks to a .NET project. Demonstrates how to find and install a package in Visual Studio."
  },
  {
    "n": 12,
    "title": "Querying Collections with LINQ",
    "math": "Language-Integrated Query (LINQ)",
    "note": "Introduces the powerful LINQ technology for querying data. Demonstrates the declarative query syntax (`From...Where...Select`) to filter, sort, and transform collections like `List(Of T)`."
  },
  {
    "n": 13,
    "title": "Asynchronous Programming with `Async` and `Await`",
    "math": "Asynchronous programming",
    "note": "Covers the `Async` and `Await` keywords, which are essential for writing responsive applications. Explains how to perform long-running operations (like web requests or file I/O) without blocking the main thread."
  },
  {
    "n": 14,
    "title": "Introduction to ASP.NET Core",
    "math": "Web frameworks",
    "note": "Introduces ASP.NET Core as the modern, cross-platform framework for building web applications and APIs with .NET. Explains the basic concepts of web requests and responses."
  },
  {
    "n": 15,
    "title": "Building a Web App with Razor Pages",
    "math": "Page-based web development",
    "note": "Provides a practical introduction to building a simple web application using the ASP.NET Core Razor Pages model. Shows how to create a page with a `.vbhtml` file for markup and a `.vb` code-behind file for logic."
  },
  {
    "n": 16,
    "title": "Database Access with ADO.NET",
    "math": "Database connectivity",
    "note": "Provides an overview of ADO.NET for database communication. Explains the core objects like `SqlConnection` and `SqlCommand` for connecting to and executing queries against a database like SQL Server."
  },
  {
    "n": 17,
    "title": "Legacy App Development: Windows Forms",
    "math": "Legacy GUI frameworks",
    "note": "Discusses Windows Forms as a legacy framework for building desktop applications on Windows. Explains its event-driven model and demonstrates the visual drag-and-drop designer in Visual Studio."
  }
]
