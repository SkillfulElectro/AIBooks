[
  {
    "n": 1,
    "title": "What is Version Control?",
    "math": "State Management, Timelines",
    "note": "Explains the concept of version control systems (VCS) as a method for tracking changes to files over time, allowing for recall of specific versions later. This lesson is purely conceptual and requires no software or command-line interaction."
  },
  {
    "n": 2,
    "title": "Installing and Configuring Git",
    "math": "System Configuration",
    "note": "Provides step-by-step instructions for installing Git and performing the essential first-time configuration of your user name and email address using `git config --global`."
  },
  {
    "n": 3,
    "title": "Creating a New Repository",
    "math": "Initialization",
    "note": "Teaches how to initialize a new Git repository in an existing project directory by running the `git init` command, which creates a hidden `.git` subdirectory to store all repository data."
  },
  {
    "n": 4,
    "title": "The Three States of Git",
    "math": "State Machines, Set Theory",
    "note": "Introduces the three fundamental states of a file in Git: the Working Directory (your files), the Staging Area (files marked for the next commit), and the Repository (committed files). This is a core conceptual lesson."
  },
  {
    "n": 5,
    "title": "The Basic Workflow: Modify, Stage, Commit",
    "math": "State transitions",
    "note": "Covers the fundamental workflow: modifying files, using `git status` to check their state, using `git add` to move them to the staging area, and using `git commit` to save a permanent snapshot of the staged changes in the repository."
  },
  {
    "n": 6,
    "title": "Viewing Commit History with `git log`",
    "math": "Graph Traversal (Linear)",
    "note": "Shows how to view the chronological history of commits. The `git log` command is used to display commits, and flags like `--oneline` and `--graph` are introduced to format the output."
  },
  {
    "n": 7,
    "title": "Inspecting Changes: `git diff`, `git show`, `git blame`",
    "math": "Set Theory (Difference)",
    "note": "Covers commands for inspecting changes. `git diff` shows unstaged changes. `git show <commit>` displays the full details and content changes of a specific commit. `git blame <file>` shows who last modified each line of a file."
  },
  {
    "n": 8,
    "title": "Ignoring Files with .gitignore",
    "math": "Pattern Matching, Set Exclusion",
    "note": "Teaches how to intentionally untrack files by creating a `.gitignore` file and adding patterns (like `*.log` or `/node_modules`) to specify which files and directories Git should ignore."
  },
  {
    "n": 9,
    "title": "Undoing Changes: `restore`, `revert`, `reset`",
    "math": "Reversion, Inverse Operations",
    "note": "Explains how to undo mistakes. `git restore` discards local changes. `git revert` creates a new commit that undoes a previous one (safe for public history). `git reset` moves the branch pointer, potentially altering history (for local changes)."
  },
  {
    "n": 10,
    "title": "Introduction to Branching",
    "math": "Graph Theory (Pointers)",
    "note": "Explains the core concept of branching in Git as a lightweight movable pointer to a commit. This allows for parallel lines of development without affecting the main branch. This is a conceptual lesson."
  },
  {
    "n": 11,
    "title": "Working with Branches",
    "math": "Pointer Manipulation",
    "note": "Teaches the practical commands for branching: `git branch <name>` to create a branch, `git switch <name>` to switch to it, `git branch` to list branches, and `git branch -d <name>` to delete a merged branch."
  },
  {
    "n": 12,
    "title": "Merging Branches",
    "math": "Graph Theory (Merging Nodes)",
    "note": "Explains how to integrate changes from one branch into another using `git merge <branch-name>`. The lesson explains the difference between a 'fast-forward' merge and a three-way merge that creates a merge commit."
  },
  {
    "n": 13,
    "title": "Handling Merge Conflicts",
    "math": "Conflict Resolution",
    "note": "Teaches how to identify and resolve merge conflicts that occur when competing changes are made to the same lines in a file. The lesson involves manually editing the conflict-marked files, then using `git add` and `git commit` to finalize the merge."
  },
  {
    "n": 14,
    "title": "Introduction to Remote Repositories",
    "math": "Distributed Systems",
    "note": "Introduces the concept of remote repositories as versions of your project hosted on a server (e.g., GitHub, GitLab). It covers cloning a remote repository with `git clone <url>` and managing remotes with `git remote`."
  },
  {
    "n": 15,
    "title": "Synchronizing with Remotes: Fetch, Pull, Push",
    "math": "Data Synchronization",
    "note": "Covers the main commands for remote interaction. `git fetch` downloads new data from a remote without integrating it. `git pull` fetches and then merges. `git push` uploads your local commits to the remote."
  },
  {
    "n": 16,
    "title": "The Forking Workflow for Collaboration",
    "math": "Distributed collaboration model",
    "note": "Explains the standard workflow for contributing to open source projects. It covers forking a repository, cloning the fork, adding the original repository as an 'upstream' remote, and creating Pull Requests to propose changes."
  },
  {
    "n": 17,
    "title": "The Rebase Workflow",
    "math": "Graph Transformation",
    "note": "Explains the `git rebase <base-branch>` command as an alternative to merging. It replays commits from the current branch on top of the base branch, creating a clean, linear history. The pros and cons versus merging are discussed."
  },
  {
    "n": 18,
    "title": "Rewriting History: Interactive Rebase",
    "math": "Sequence Editing",
    "note": "Introduces rewriting commit history with `git rebase -i <commit-ref>`. This opens an interactive editor to reorder, squash (combine), edit, or remove a series of recent commits on a branch before sharing them."
  },
  {
    "n": 19,
    "title": "Stashing Changes",
    "math": "Stack Data Structure",
    "note": "Covers how to temporarily save uncommitted changes that are not ready to be committed. The lesson demonstrates `git stash` to save changes and `git stash pop` to reapply them."
  },
  {
    "n": 20,
    "title": "Tagging Versions",
    "math": "Named Pointers, Versioning",
    "note": "Teaches how to create permanent markers for specific points in history, like software releases. The lesson covers creating lightweight and annotated tags (`git tag`) and pushing them to a remote."
  },
  {
    "n": 21,
    "title": "Cherry-Picking a Commit",
    "math": "Patch Application",
    "note": "Shows how to apply a specific commit from one branch onto another. The `git cherry-pick <commit-hash>` command is used to take the changes from a single commit and re-apply them as a new commit on the current branch."
  },
  {
    "n": 22,
    "title": "The Reflog: Your Safety Net",
    "math": "Operation Logging",
    "note": "Introduces the reference log. The `git reflog` command is used to view a log of all actions where HEAD was updated, allowing for the recovery of commits that appear to be lost after a `reset` or `rebase`."
  },
  {
    "n": 23,
    "title": "Automated Bug Finding with Bisect",
    "math": "Binary Search Algorithm",
    "note": "Explains how to use `git bisect` to find the commit that introduced a bug. The lesson walks through starting a session, marking commits as 'good' or 'bad', and letting Git perform a binary search on the commit history."
  },
  {
    "n": 24,
    "title": "Handling Large Files with Git LFS",
    "math": "Pointer-Based Storage",
    "note": "Teaches the use of Git Large File Storage (LFS) for versioning large binary files. The lesson covers installing the LFS extension and using `git lfs track` to tell Git to store pointers to large files instead of the files themselves."
  },
  {
    "n": 25,
    "title": "Automating Tasks with Git Hooks",
    "math": "Event-Driven Programming",
    "note": "Introduces Git hooks as scripts that run automatically at certain points in the Git lifecycle (e.g., pre-commit, post-commit). The lesson provides an example of a `pre-commit` hook to run a linter or formatter."
  }
]
