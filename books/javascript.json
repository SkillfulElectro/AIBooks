[
  {
    "n": 1,
    "title": "Introduction to JavaScript",
    "math": "Logic",
    "note": "This section introduces JavaScript as the programming language of the Web. It covers its history, its role alongside HTML and CSS, and what it can do (e.g., make web pages interactive). The context is a standard web browser environment."
  },
  {
    "n": 2,
    "title": "Setting Up a Development Environment",
    "math": "Logic",
    "note": "Explains how to set up a basic development environment for JavaScript. This includes using the browser's built-in developer tools and console, and setting up a simple HTML file to include a JavaScript script."
  },
  {
    "n": 3,
    "title": "Variables and Data Types",
    "math": "Algebra",
    "note": "Explains how to declare variables using `var`, `let`, and `const`, covering scope differences. It also introduces the primitive data types: `String`, `Number`, `Boolean`, `Null`, `Undefined`, and `Symbol`."
  },
  {
    "n": 4,
    "title": "Operators",
    "math": "Arithmetic and Boolean algebra",
    "note": "Covers the main operators: arithmetic (`+`, `-`, `*`), assignment (`=`), comparison (`==`, `===`), and logical (`&&`, `||`, `!`). It emphasizes the crucial difference between strict (`===`) and loose (`==`) equality."
  },
  {
    "n": 5,
    "title": "Conditional Statements (if/else, switch)",
    "math": "Conditional logic",
    "note": "This section explains how to use `if`, `else if`, `else`, and `switch` statements to control the flow of a program based on different conditions."
  },
  {
    "n": 6,
    "title": "Loops: for and while",
    "math": "Iteration",
    "note": "Covers the fundamental loop structures in JavaScript: the `for` loop, the `while` loop, and the `do...while` loop for repeating blocks of code."
  },
  {
    "n": 7,
    "title": "Functions",
    "math": "Functional programming",
    "note": "Introduces functions for creating reusable blocks of code. The lesson covers function declarations, function expressions, parameters, return values, and the concept of hoisting."
  },
  {
    "n": 8,
    "title": "Arrow Functions (ES6)",
    "math": "Functional programming",
    "note": "Introduces arrow functions (`=>`), a more concise syntax for writing functions introduced in ES6. The lesson also highlights the key difference in how arrow functions handle the `this` keyword."
  },
  {
    "n": 9,
    "title": "Objects",
    "math": "Key-value pairs",
    "note": "Explains JavaScript objects as collections of key-value pairs (properties). The lesson covers object literals, dot vs. bracket notation, and adding methods (functions as properties)."
  },
  {
    "n": 10,
    "title": "The `this` Keyword",
    "math": "Object-oriented programming",
    "note": "This lesson introduces the `this` keyword and explains how its value is determined by the context in which it is called (e.g., in a method, in a standalone function, or in an arrow function)."
  },
  {
    "n": 11,
    "title": "Arrays",
    "math": "Set theory",
    "note": "Introduces arrays for storing ordered collections of data. It covers creating arrays, accessing elements by index, and common properties and methods like `length`, `push`, and `pop`."
  },
  {
    "n": 12,
    "title": "Array Iteration Methods",
    "math": "Functional programming",
    "note": "This section introduces modern, functional methods for iterating over arrays. It explains `forEach` for simple iteration, `map` for creating a new transformed array, `filter` for selecting elements, and `reduce` for aggregating values."
  },
  {
    "n": 13,
    "title": "Destructuring and Spread/Rest (ES6)",
    "math": "Set theory",
    "note": "Introduces powerful ES6 syntax for working with arrays and objects. This lesson covers destructuring for easily extracting values, and the spread (`...`) and rest (`...`) operators for expanding or collecting elements."
  },
  {
    "n": 14,
    "title": "Prototypes and Prototypal Inheritance",
    "math": "Object-oriented programming",
    "note": "This section delves into the core of JavaScript's object model: prototypal inheritance. It explains how objects can inherit properties and methods from other objects via their prototype chain."
  },
  {
    "n": 15,
    "title": "ES6 Classes",
    "math": "Object-oriented programming",
    "note": "Introduces the `class` keyword from ES6, which provides a cleaner, more modern syntax for creating constructor functions and implementing inheritance. The lesson explains that this is syntactic sugar over JavaScript's existing prototype-based inheritance."
  },
  {
    "n": 16,
    "title": "Introduction to the DOM",
    "math": "Graph theory",
    "note": "Introduces the Document Object Model (DOM), the browser's object-based representation of an HTML document. It explains how JavaScript can interact with the DOM to dynamically manipulate web page content."
  },
  {
    "n": 17,
    "title": "Selecting and Manipulating DOM Elements",
    "math": "Graph theory",
    "note": "Covers the essential methods for selecting elements (`querySelector`, `getElementById`, etc.) and how to modify them by changing text content, attributes, and CSS styles."
  },
  {
    "n": 18,
    "title": "JavaScript Events and Event Handling",
    "math": "Event-driven programming",
    "note": "Explains the event-driven nature of JavaScript in the browser. The lesson covers how to listen for user actions (like `click`, `mouseover`, `keydown`) using `addEventListener` and how to use the event object passed to the handler function."
  },
  {
    "n": 19,
    "title": "Understanding the Event Loop",
    "math": "Concurrency model",
    "note": "A conceptual lesson explaining the JavaScript concurrency model. It covers the roles of the Call Stack, Web APIs, the Callback Queue (Macrotask Queue), and the Microtask Queue (for Promises), and explains how the Event Loop orchestrates them all."
  },
  {
    "n": 20,
    "title": "Asynchronous JavaScript: Callbacks, Promises, and Async/Await",
    "math": "Asynchronous programming",
    "note": "Introduces asynchronous programming. It covers the evolution from callbacks to the more robust Promises (`.then`, `.catch`), and finally to the modern `async/await` syntax, which makes asynchronous code easier to read and write."
  },
  {
    "n": 21,
    "title": "Making HTTP Requests with the Fetch API",
    "math": "API design",
    "note": "Covers how to use the modern Fetch API to make network requests to a server. The lesson demonstrates how to make a simple GET request to retrieve data (like JSON) and process the Promise-based response."
  },
  {
    "n": 22,
    "title": "Working with JSON",
    "math": "Set theory",
    "note": "This section introduces JavaScript Object Notation (JSON) as the standard format for data exchange on the web. It covers how to parse a JSON string into a JavaScript object (`JSON.parse()`) and vice-versa (`JSON.stringify()`)."
  },
  {
    "n": 23,
    "title": "Error Handling with try/catch",
    "math": "Logic",
    "note": "Explains how to handle runtime errors gracefully using `try...catch` blocks. It covers how to catch exceptions and prevent them from breaking the entire application, which is crucial for robust code."
  },
  {
    "n": 24,
    "title": "ES6 Modules",
    "math": "Set theory",
    "note": "Explains how to use ES6 modules to organize code into separate, reusable files. The lesson covers the `import` and `export` keywords for sharing code between modules, a key practice for building large-scale applications."
  },
  {
    "n": 25,
    "title": "Web Storage API: localStorage and sessionStorage",
    "math": "Key-value pairs",
    "note": "Explains how to use the Web Storage API to store key-value data on the client-side. The lesson covers the difference between `localStorage` (persistent) and `sessionStorage` (per-session)."
  },
  {
    "n": 26,
    "title": "Strict Mode",
    "math": "Formal language semantics",
    "note": "A short but important lesson on Strict Mode. It explains what it is, how to enable it with `'use strict';`, and how it helps developers avoid common errors and write more secure and robust code by changing certain 'bad' syntaxes into real errors."
  },
  {
    "n": 27,
    "title": "Modern JavaScript Tooling: Transpilers and Bundlers",
    "math": "Code transformation",
    "note": "A conceptual lesson on the modern JavaScript ecosystem. It introduces the need for tools like Babel (a transpiler to convert modern JS to older, more compatible versions) and Webpack/Vite (module bundlers to process and combine code for production)."
  },
  {
    "n": 28,
    "title": "Next Steps: Introduction to a Framework",
    "math": "Component-based architecture",
    "note": "This final section provides a high-level overview of what a front-end framework is and why they are used. It briefly introduces one of the major frameworks (like React, Vue, or Angular) and explains how it builds upon the core JavaScript concepts learned in the course."
  }
]
