[
  {
    "n": 1,
    "title": "Introduction to Tailwind CSS",
    "math": "Utility-first design",
    "note": "Introduces Tailwind CSS as a utility-first CSS framework for rapidly building custom user interfaces. Covers the core philosophy of using small, single-purpose utility classes directly in your HTML."
  },
  {
    "n": 2,
    "title": "Setting Up Your Project",
    "math": "Build process",
    "note": "Explains the primary way to install Tailwind using npm and integrating it into a build process with PostCSS. Covers creating the `tailwind.config.js` file and processing your CSS."
  },
  {
    "n": 3,
    "title": "Core Concepts: Utility-First Fundamentals",
    "math": "Set theory",
    "note": "Covers the fundamental concept of applying utility classes for styling text, colors, and spacing. Explains how the Just-in-Time (JIT) engine generates styles on-demand as you write them."
  },
  {
    "n": 4,
    "title": "Handling Hover, Focus, and Other States",
    "math": "State machines",
    "note": "Explains how to style elements on different states using variant modifiers. Covers common state variants like `hover:`, `focus:`, `active:`, and `disabled:`."
  },
  {
    "n": 5,
    "title": "Responsive Design: Mobile-First with Breakpoints",
    "math": "Geometry",
    "note": "Introduces Tailwind's mobile-first approach to responsive design. Explains how to use breakpoint prefixes (like `md:`, `lg:`) to apply different utility classes at different screen sizes (viewports)."
  },
  {
    "n": 6,
    "title": "Responsive Components with Container Queries",
    "math": "Component-based responsive design",
    "note": "Introduces the concept of container queries via the official `@tailwindcss/container-queries` plugin. Explains how to mark a parent as a `@container` and use variants like `@lg` to make components respond to their own size, not just the viewport."
  },
  {
    "n": 7,
    "title": "Dark Mode",
    "math": "Boolean algebra",
    "note": "Covers how to implement a dark mode theme using Tailwind's `dark:` variant. Demonstrates how to toggle dark mode based on user preference or a manual class."
  },
  {
    "n": 8,
    "title": "Layout: Sizing, Spacing, and Position",
    "math": "Coordinate geometry",
    "note": "Covers utilities for controlling size (width, height), spacing (margin, padding), and the CSS `position` property (`relative`, `absolute`, `fixed`)."
  },
  {
    "n": 9,
    "title": "Layout: Flexbox",
    "math": "Linear algebra",
    "note": "Provides a deep dive into Tailwind's powerful flexbox utilities. Covers creating flex containers, controlling direction, wrapping, and the alignment and justification of flex items."
  },
  {
    "n": 10,
    "title": "Layout: Grid",
    "math": "Matrix algebra",
    "note": "Explains how to create complex grid layouts. Covers defining grid columns and rows, placing items, and creating gaps between grid elements."
  },
  {
    "n": 11,
    "title": "Styling: Colors and Typography",
    "math": "Color theory & Typography",
    "note": "Covers Tailwind's extensive color palette for text, backgrounds, and borders. Also covers utilities for controlling font family, size, weight, and other text properties."
  },
  {
    "n": 12,
    "title": "Styling: Borders, Rings, and Effects",
    "math": "Geometry & Image processing",
    "note": "Covers utilities for styling element borders (width, color, radius), rings for outlines, and visual effects like box shadows, opacity, and CSS filters (blur, grayscale)."
  },
  {
    "n": 13,
    "title": "Transitions and Animations",
    "math": "Animation",
    "note": "Explains how to use utilities to apply smooth CSS transitions and built-in animations for effects like spinning and bouncing."
  },
  {
    "n": 14,
    "title": "Extracting Reusable Components with @apply",
    "math": "Abstraction",
    "note": "Explains how to use the `@apply` directive in a CSS file to extract a set of utility classes into a reusable custom CSS class, and discusses the pros and cons of this approach."
  },
  {
    "n": 15,
    "title": "Customizing Your Theme",
    "math": "Configuration",
    "note": "Provides a deep dive into the `tailwind.config.js` file. Explains how to customize Tailwind's default theme by extending the color palette, spacing scale, or adding new fonts."
  },
  {
    "n": 16,
    "title": "Using Arbitrary Values",
    "math": "Ad-hoc values",
    "note": "Demonstrates how to use arbitrary values with the JIT engine to create one-off styles that are not part of your theme, using the square-bracket notation (e.g., `w-[117px]`)."
  },
  {
    "n": 17,
    "title": "Writing a Basic Plugin",
    "math": "Software architecture",
    "note": "Provides an introduction to writing a basic Tailwind CSS plugin to add new utility classes, components, or variants to the framework."
  },
  {
    "n": 18,
    "title": "Using Official Plugins (Typography, Forms)",
    "math": "Ecosystem",
    "note": "Introduces some of the official plugins maintained by the Tailwind CSS team, such as `@tailwindcss/typography` for beautiful prose styling and `@tailwindcss/forms` for resetting default form styles."
  },
  {
    "n": 19,
    "title": "Optimizing for Production",
    "math": "Optimization",
    "note": "Covers the crucial step of optimizing your CSS for production. Explains how Tailwind automatically removes unused CSS based on your `content` configuration to create the smallest possible file size."
  }
]
