[
  {
    "n": 1,
    "title": "Introduction to SciPy",
    "math": "Scientific computing",
    "note": "This section introduces SciPy as a fundamental library for scientific and technical computing in Python. It explains that SciPy is built on top of NumPy and provides a large collection of algorithms and functions for science and engineering. The context is the scientific Python ecosystem."
  },
  {
    "n": 2,
    "title": "SciPy's Relationship with NumPy",
    "math": "Set theory",
    "note": "Clarifies the relationship between the SciPy library and the NumPy library. The lesson explains that NumPy provides the array data structure and basic operations, while SciPy provides more advanced scientific algorithms that operate on these arrays."
  },
  {
    "n": 3,
    "title": "Overview of SciPy Subpackages",
    "math": "Set theory",
    "note": "This lesson provides a high-level overview of the various subpackages within the SciPy library, such as `scipy.stats`, `scipy.linalg`, `scipy.optimize`, and `scipy.integrate`. It gives a roadmap of the different scientific domains that SciPy covers."
  },
  {
    "n": 4,
    "title": "Linear Algebra with `scipy.linalg`",
    "math": "Linear algebra",
    "note": "Explains how to use the `scipy.linalg` module for advanced linear algebra operations, building on what NumPy provides. The lesson covers finding the determinant, inverse, and singular value decomposition (SVD) of a matrix."
  },
  {
    "n": 5,
    "title": "Statistics with `scipy.stats`",
    "math": "Statistics",
    "note": "This section introduces the `scipy.stats` module for statistical analysis. It covers working with probability distributions (like the normal distribution), calculating descriptive statistics, and performing common hypothesis tests (like t-tests)."
  },
  {
    "n": 6,
    "title": "Numerical Integration with `scipy.integrate`",
    "math": "Calculus",
    "note": "Explains how to perform numerical integration (finding the area under a curve) using functions from the `scipy.integrate` module. The lesson focuses on `quad` for single integrals and `dblquad` for double integrals."
  },
  {
    "n": 7,
    "title": "Solving Ordinary Differential Equations (ODEs)",
    "math": "Differential equations",
    "note": "This lesson introduces how to solve initial value problems for ordinary differential equations using the `solve_ivp` function from `scipy.integrate`. The context is on modeling dynamic systems in science and engineering."
  },
  {
    "n": 8,
    "title": "Optimization with `scipy.optimize`",
    "math": "Optimization",
    "note": "Covers how to find the minimum of a scalar function or a multivariate function using the `scipy.optimize` module. The lesson explains how to use functions like `minimize` to solve optimization problems."
  },
  {
    "n": 9,
    "title": "Curve Fitting",
    "math": "Regression analysis",
    "note": "This section explains how to perform curve fitting to find the best-fit parameters for a function to a set of data points. It demonstrates the use of `curve_fit` from the `scipy.optimize` module."
  },
  {
    "n": 10,
    "title": "Interpolation with `scipy.interpolate`",
    "math": "Numerical analysis",
    "note": "Explains how to use the `scipy.interpolate` module to estimate values between known data points. The lesson covers 1D interpolation using functions like `interp1d` and 2D interpolation with `interp2d`."
  },
  {
    "n": 11,
    "title": "Signal Processing with `scipy.signal`",
    "math": "Signal processing",
    "note": "This lesson introduces the `scipy.signal` module for signal processing tasks. It covers concepts like filtering a signal to remove noise, detrending, and analyzing signal properties."
  },
  {
    "n": 12,
    "title": "Fourier Analysis with `scipy.fft`",
    "math": "Fourier analysis",
    "note": "Explains how to use the Fast Fourier Transform (FFT) from the `scipy.fft` module to analyze the frequency spectrum of a signal. The context is on applications in audio processing, image analysis, and physics."
  },
  {
    "n": 13,
    "title": "Image Processing with `scipy.ndimage`",
    "math": "Computer vision",
    "note": "This section covers how to perform multi-dimensional image processing tasks using the `scipy.ndimage` module. It demonstrates operations like blurring (e.g., Gaussian filter), sharpening, and edge detection on images represented as NumPy arrays."
  },
  {
    "n": 14,
    "title": "Spatial Data with `scipy.spatial`",
    "math": "Computational geometry",
    "note": "Introduces the `scipy.spatial` module for working with spatial data. The lesson covers concepts like calculating distances between points, working with convex hulls, and Voronoi diagrams."
  },
  {
    "n": 15,
    "title": "Clustering with `scipy.cluster`",
    "math": "Cluster analysis",
    "note": "Explains how to perform clustering analysis on a dataset using the `scipy.cluster` module. The lesson covers hierarchical clustering (creating dendrograms) and vector quantization (k-means)."
  },
  {
    "n": 16,
    "title": "File I/O with `scipy.io`",
    "math": "File I/O",
    "note": "Explains how to read from and write to various file formats used in scientific computing. The lesson focuses on loading and saving MATLAB files (`.mat`), NetCDF files, and files from other specific scientific domains."
  },
  {
    "n": 17,
    "title": "Special Functions",
    "math": "Special functions",
    "note": "This final section introduces the `scipy.special` module, which contains a large number of special mathematical functions used in physics and engineering, such as Bessel functions, gamma functions, and error functions."
  }
]
