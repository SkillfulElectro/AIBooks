[
  {
    "n": 1,
    "title": "Introduction to RDBMS and DB2",
    "math": "Relational model",
    "note": "This section introduces the Relational Database Management System (RDBMS) as a system for managing data stored in tables. It then presents IBM's DB2 as a high-performance, enterprise-grade RDBMS with a long history, available on a wide range of platforms from Linux and Windows to mainframes."
  },
  {
    "n": 2,
    "title": "The DB2 Architecture",
    "math": "System architecture",
    "note": "This lesson provides a high-level overview of the DB2 architecture. It explains the key concepts of a DB2 instance (a logical database manager environment), which can manage multiple databases. It also introduces core components like buffer pools (for caching) and table spaces (for storage)."
  },
  {
    "n": 3,
    "title": "Setting Up a DB2 Environment",
    "math": "Software installation",
    "note": "This section provides a guide to installing the DB2 Community Edition, which is a free version for development and small-scale production. It covers the installation process and introduces the DB2 Command Line Processor (CLP), the primary text-based interface for interacting with DB2."
  },
  {
    "n": 4,
    "title": "Data Definition Language (DDL): Tables and Schemas",
    "math": "Schema design",
    "note": "This lesson covers the SQL DDL commands used to define the database structure. It demonstrates how to use the `CREATE TABLE` statement, how to define columns with specific DB2 data types (like `VARCHAR`, `INTEGER`, `DECIMAL`), and how to organize tables into logical groups using schemas."
  },
  {
    "n": 5,
    "title": "DDL: Constraints",
    "math": "Data integrity constraints",
    "note": "This section explains how to enforce data integrity using constraints. It covers defining a `PRIMARY KEY` for unique row identification, a `FOREIGN KEY` to enforce relationships between tables, and other constraints like `UNIQUE`, `NOT NULL`, and `CHECK`."
  },
  {
    "n": 6,
    "title": "DDL: Views and Indexes",
    "math": "Database views and indexes",
    "note": "This lesson covers two other important database objects. It explains how to create a View, which is a stored query that can be used like a virtual table to simplify complex queries. It also demonstrates how to create an Index on a table to speed up data retrieval operations."
  },
  {
    "n": 7,
    "title": "Data Manipulation Language (DML): `INSERT`",
    "math": "Create operation",
    "note": "This section focuses on adding data to the database. It details the syntax of the `INSERT` statement, showing how to insert a single row of data into a table by providing values for its columns."
  },
  {
    "n": 8,
    "title": "DML: `UPDATE` and `DELETE`",
    "math": "Update and Delete operations",
    "note": "This lesson covers modifying and removing data. It explains the `UPDATE` statement for changing existing records, emphasizing the importance of the `WHERE` clause to specify which rows to update. It also covers the `DELETE` statement for removing records, again highlighting the `WHERE` clause."
  },
  {
    "n": 9,
    "title": "Querying Data: The `SELECT` Statement",
    "math": "Data retrieval",
    "note": "This section introduces the foundation of data retrieval in SQL. It covers the `SELECT` statement for specifying the columns to be returned, the `FROM` clause for specifying the table, and the `WHERE` clause for filtering the rows based on specific conditions."
  },
  {
    "n": 10,
    "title": "Sorting and Limiting Results",
    "math": "Sorting and result set limiting",
    "note": "This lesson explains how to control the output of a query. It covers the `ORDER BY` clause for sorting the results in ascending or descending order. It also demonstrates the `FETCH FIRST n ROWS ONLY` clause, which is DB2's syntax for limiting the number of rows returned."
  },
  {
    "n": 11,
    "title": "Joining Tables",
    "math": "Relational joins",
    "note": "This section explains how to combine data from multiple tables in a single query. It details the syntax for `INNER JOIN` (to get matching rows from both tables) and `LEFT JOIN` (to get all rows from the left table and any matching rows from the right table)."
  },
  {
    "n": 12,
    "title": "Aggregation with `GROUP BY`",
    "math": "Data aggregation",
    "note": "This lesson covers how to perform calculations on groups of rows. It introduces aggregate functions like `COUNT()`, `SUM()`, and `AVG()`. It then explains how the `GROUP BY` clause is used to group rows that have the same values in specified columns into summary rows."
  },
  {
    "n": 13,
    "title": "Filtering Groups with `HAVING`",
    "math": "Group filtering",
    "note": "This section explains the `HAVING` clause, which is used to filter the results of a `GROUP BY` query. It clarifies the difference between `WHERE` (which filters rows before aggregation) and `HAVING` (which filters groups after aggregation)."
  },
  {
    "n": 14,
    "title": "Transaction Control: `COMMIT` and `ROLLBACK`",
    "math": "ACID properties",
    "note": "This lesson introduces the concept of a transaction as a sequence of operations performed as a single logical unit of work. It explains the `COMMIT` command to make a transaction's changes permanent and the `ROLLBACK` command to undo all changes made since the transaction began."
  },
  {
    "n": 15,
    "title": "Introduction to DB2 Procedural Programming",
    "math": "Procedural language (SQL PL)",
    "note": "This section introduces SQL PL (SQL Procedural Language), which allows you to write procedural code like loops, conditionals, and variables directly within the database. This is used to create stored procedures, functions, and triggers."
  },
  {
    "n": 16,
    "title": "Stored Procedures",
    "math": "Database procedures",
    "note": "This lesson defines a Stored Procedure as a set of SQL statements that can be stored in the database and executed as a single unit. It demonstrates how to create a simple stored procedure in SQL PL and how to call it from the command line or an application."
  },
  {
    "n": 17,
    "title": "DB2 Administration: Security Management",
    "math": "Access control (GRANT, REVOKE)",
    "note": "This section for administrators covers how to manage security in DB2. It introduces the concepts of authorities (high-level permissions) and privileges (rights to perform actions on specific objects). The `GRANT` and `REVOKE` statements are demonstrated for managing these permissions."
  },
  {
    "n": 18,
    "title": "DB2 Administration: Backup and Recovery",
    "math": "Data backup and recovery",
    "note": "This lesson covers the critical administrative task of database backup and recovery. It explains the difference between an offline and online backup and demonstrates the basic `BACKUP DATABASE` and `RESTORE DATABASE` commands."
  },
  {
    "n": 19,
    "title": "Performance Tuning: The `EXPLAIN` Facility",
    "math": "Query optimization",
    "note": "This section introduces the concept of performance tuning. It explains how the DB2 optimizer chooses an 'access plan' to execute a query. It then demonstrates the `EXPLAIN` facility, a tool that allows you to see the access plan chosen by the optimizer, which is the first step in identifying performance bottlenecks."
  },
  {
    "n": 20,
    "title": "Performance Tuning: `RUNSTATS` and `REORG`",
    "math": "Database maintenance",
    "note": "This final lesson covers two key maintenance commands for performance. `RUNSTATS` is used to update the statistical information about tables and indexes, which the optimizer uses to make good decisions. `REORG` is used to reorganize tables and indexes to reclaim space and improve data contiguity."
  }
]
