[
  {
    "n": 1,
    "title": "Introduction to RDBMS and IBM DB2",
    "math": "Relational model",
    "note": "This section introduces the Relational Database Management System (RDBMS) as a system for managing data stored in tables. It then presents IBM's DB2 as a high-performance, enterprise-grade RDBMS."
  },
  {
    "n": 2,
    "title": "DB2 Platforms: LUW vs. z/OS",
    "math": "Platform architecture",
    "note": "This lesson clarifies the two main DB2 families. DB2 for z/OS runs on IBM mainframes. DB2 for Linux, UNIX, and Windows (LUW) runs on distributed systems. This book focuses on DB2 LUW, which is the platform for the free Community Edition."
  },
  {
    "n": 3,
    "title": "The DB2 LUW Architecture",
    "math": "System architecture",
    "note": "This lesson provides an overview of the DB2 LUW architecture. It explains the concepts of an instance (a logical database manager), databases, buffer pools (memory caching), and table spaces (storage management)."
  },
  {
    "n": 4,
    "title": "Setting Up a DB2 Environment",
    "math": "Software installation",
    "note": "This section provides a guide to installing the DB2 Community Edition. It covers the installation process and introduces the DB2 Command Line Processor (CLP), the primary text-based interface for interacting with DB2."
  },
  {
    "n": 5,
    "title": "DDL: Schemas, Tables, and Data Types",
    "math": "Schema design",
    "note": "This lesson covers the SQL DDL commands to define the database structure. It demonstrates `CREATE TABLE`, defining columns with DB2 data types, and organizing tables into logical groups using schemas."
  },
  {
    "n": 6,
    "title": "DDL: Constraints for Data Integrity",
    "math": "Data integrity constraints",
    "note": "This section explains how to enforce data integrity using constraints. It covers defining a `PRIMARY KEY`, a `FOREIGN KEY` to enforce relationships, and other constraints like `UNIQUE`, `NOT NULL`, and `CHECK`."
  },
  {
    "n": 7,
    "title": "DDL: Views and Indexes",
    "math": "Database views and indexes",
    "note": "This lesson covers two other important database objects. It explains how to create a View (a stored query that acts like a virtual table) and how to create an Index on a table to speed up data retrieval."
  },
  {
    "n": 8,
    "title": "DML: `INSERT`, `UPDATE`, and `DELETE`",
    "math": "Create, Update, Delete operations",
    "note": "This lesson covers the core Data Manipulation Language commands. It explains the `INSERT`, `UPDATE`, and `DELETE` statements, emphasizing the critical importance of the `WHERE` clause for `UPDATE` and `DELETE` to affect only the intended rows."
  },
  {
    "n": 9,
    "title": "Querying Data: The `SELECT` Statement",
    "math": "Data retrieval",
    "note": "This section introduces the foundation of data retrieval in SQL. It covers the `SELECT` statement for specifying columns, the `FROM` clause for tables, and the `WHERE` clause for filtering rows."
  },
  {
    "n": 10,
    "title": "Sorting and Limiting Results",
    "math": "Sorting and result set limiting",
    "note": "This lesson explains how to control query output. It covers the `ORDER BY` clause for sorting results and the `FETCH FIRST n ROWS ONLY` clause, which is DB2's syntax for limiting the number of rows returned."
  },
  {
    "n": 11,
    "title": "Joining Tables",
    "math": "Relational joins",
    "note": "This section explains how to combine data from multiple tables. It details the syntax for `INNER JOIN` (to get matching rows from both tables) and `LEFT JOIN` (to get all rows from the left table and any matching rows from the right)."
  },
  {
    "n": 12,
    "title": "Aggregation with `GROUP BY` and `HAVING`",
    "math": "Data aggregation",
    "note": "This lesson covers aggregate functions like `COUNT()`, `SUM()`, and `AVG()`. It explains how `GROUP BY` is used to group rows for aggregation and how the `HAVING` clause is used to filter those groups."
  },
  {
    "n": 13,
    "title": "Transaction Control and Concurrency",
    "math": "ACID properties",
    "note": "This lesson introduces a transaction as a single logical unit of work. It explains `COMMIT` and `ROLLBACK` for transaction control. It also introduces the concept of locking and DB2's isolation levels (e.g., Read Stability) which manage how transactions interact."
  },
  {
    "n": 14,
    "title": "DB2 Procedural Programming with SQL PL",
    "math": "Procedural language (SQL PL)",
    "note": "This section introduces SQL PL (SQL Procedural Language), which allows you to write procedural code like loops and conditionals. This is used to create stored procedures, functions, and triggers that execute on the database server."
  },
  {
    "n": 15,
    "title": "Stored Procedures",
    "math": "Database procedures",
    "note": "This lesson defines a Stored Procedure as a set of SQL statements stored in the database. It demonstrates how to create a simple stored procedure in SQL PL and how to call it."
  },
  {
    "n": 16,
    "title": "DB2 Security: Authentication and Authorization",
    "math": "Access control (GRANT, REVOKE)",
    "note": "This section covers DB2 security. It explains the difference between authentication (verifying identity) and authorization (granting permissions). It introduces authorities, privileges, and the `GRANT` and `REVOKE` statements for managing access."
  },
  {
    "n": 17,
    "title": "DB2 Logging for Recovery",
    "math": "Database logging",
    "note": "This lesson covers the crucial role of transaction logs. It explains the difference between circular logging (for crash recovery only) and archival logging (which archives logs, enabling point-in-time recovery and features like HADR)."
  },
  {
    "n": 18,
    "title": "DB2 Administration: Backup and Recovery",
    "math": "Data backup and recovery",
    "note": "This lesson covers the critical administrative task of database backup and recovery. It explains the difference between an offline and online backup and demonstrates the basic `BACKUP DATABASE` and `RESTORE DATABASE` commands."
  },
  {
    "n": 19,
    "title": "DB2 High Availability with HADR",
    "math": "High availability, disaster recovery",
    "note": "This lesson introduces DB2's primary high availability feature. It explains how High Availability Disaster Recovery (HADR) works by replicating data from a primary to a standby server via transaction logs, allowing for rapid and often automatic failover."
  },
  {
    "n": 20,
    "title": "Data Movement: `IMPORT`, `EXPORT`, and `LOAD`",
    "math": "Bulk data operations",
    "note": "This lesson covers DB2's utilities for moving large amounts of data. It contrasts the `IMPORT` utility (slower, uses SQL) with the `LOAD` utility (faster, direct page writes) and explains the `EXPORT` command for writing table data to a file."
  },
  {
    "n": 21,
    "title": "Performance Tuning: The `EXPLAIN` Facility",
    "math": "Query optimization",
    "note": "This section introduces performance tuning. It explains how the DB2 optimizer chooses an 'access plan' to execute a query and demonstrates the `EXPLAIN` facility, a tool that allows you to see the chosen plan to identify bottlenecks."
  },
  {
    "n": 22,
    "title": "Performance Tuning: `RUNSTATS` and `REORG`",
    "math": "Database maintenance",
    "note": "This lesson covers two key maintenance commands. `RUNSTATS` updates the statistics that the optimizer uses to make good decisions. `REORG` reorganizes tables and indexes to reclaim space and improve data contiguity, which can significantly improve scan performance."
  },
  {
    "n": 23,
    "title": "Performance Monitoring",
    "math": "Database monitoring",
    "note": "This lesson introduces how to actively monitor a DB2 database. It covers using administrative views and snapshot functions to check key performance indicators (KPIs) like the buffer pool hit ratio, lock wait times, and sort overflows."
  }
]
