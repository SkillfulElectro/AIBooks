[
  {
    "n": 1,
    "title": "Introduction to Django",
    "math": "Software architecture",
    "note": "This section introduces Django as a high-level Python web framework that encourages rapid development and clean, pragmatic design. It covers the MVT (Model-View-Template) architectural pattern and the 'batteries-included' philosophy."
  },
  {
    "n": 2,
    "title": "Setting Up a Django Project",
    "math": "Project setup",
    "note": "Provides a guide on how to set up a new Django project. The lesson covers installing Python and Django, creating a virtual environment, and using the `django-admin` command to start a new project and understand its file structure."
  },
  {
    "n": 3,
    "title": "Django Apps",
    "math": "Modularity",
    "note": "This lesson explains the concept of apps in Django as reusable modules. It covers creating a new app with `manage.py startapp`, registering it with the project, and the purpose of the files generated within the app directory."
  },
  {
    "n": 4,
    "title": "Views and URLconfs",
    "math": "Request routing",
    "note": "Explains how to create views, which are Python functions that take a web request and return a web response. The lesson also covers how to map URLs to views using a URLconf (`urls.py`), which acts as the table of contents for the site."
  },
  {
    "n": 5,
    "title": "Django Template Language (DTL)",
    "math": "Dynamic content generation",
    "note": "This section introduces the DTL for creating dynamic HTML pages. It covers template variables (`{{...}}`), tags (`{%...%}`), filters (`|...`), and the powerful concept of template inheritance with `{% extends %}` and `{% block %}`."
  },
  {
    "n": 6,
    "title": "Django Models and the ORM",
    "math": "Object-Relational Mapping",
    "note": "Explains how to define the data model for an application using Django's Object-Relational Mapper (ORM). The lesson covers creating model classes and defining fields like `CharField` and `IntegerField`."
  },
  {
    "n": 7,
    "title": "Model Relationships",
    "math": "Relational algebra",
    "note": "Covers how to define relationships between models, such as `ForeignKey` (many-to-one), `ManyToManyField`, and `OneToOneField`, which Django translates into the appropriate database schema."
  },
  {
    "n": 8,
    "title": "Database Migrations",
    "math": "Schema versioning",
    "note": "This lesson covers Django's migration system for managing changes to the database schema. It explains how to use the `makemigrations` and `migrate` commands to keep the database schema in sync with the models."
  },
  {
    "n": 9,
    "title": "The Django Admin",
    "math": "Scaffolding",
    "note": "Introduces Django's built-in admin interface, a powerful tool for managing data. The lesson shows how to register models with the admin site and how to customize the admin interface using `ModelAdmin` classes."
  },
  {
    "n": 10,
    "title": "Querying Data with the ORM",
    "math": "Query languages",
    "note": "This section explains how to use the Django ORM to retrieve data. It covers making queries with methods like `.all()`, `.filter()`, `.exclude()`, and `.get()`. It also introduces `Q` objects for complex `OR` lookups."
  },
  {
    "n": 11,
    "title": "Django Forms",
    "math": "Form handling",
    "note": "Explains how to create and handle HTML forms. The lesson covers creating a `Form` class, rendering it in a template, validating the submitted data in a view, and understanding Cross-Site Request Forgery (CSRF) protection."
  },
  {
    "n": 12,
    "title": "ModelForms",
    "math": "Code generation",
    "note": "This lesson introduces `ModelForm`, a helper class for creating a form directly from a Django model. It demonstrates how `ModelForm` can simplify the process of creating forms for CRUD (Create, Read, Update, Delete) operations."
  },
  {
    "n": 13,
    "title": "Class-Based Views (CBVs)",
    "math": "Object-oriented programming",
    "note": "Introduces class-based views as an alternative to function-based views. The lesson covers Django's generic CBVs for common tasks, such as `ListView` for displaying lists of objects and `DetailView` for single object pages."
  },
  {
    "n": 14,
    "title": "Generic Editing Views",
    "math": "Object-oriented programming",
    "note": "Expands on CBVs by covering the generic editing views: `CreateView`, `UpdateView`, and `DeleteView`. These views provide a powerful and reusable way to handle form processing for creating and modifying objects."
  },
  {
    "n": 15,
    "title": "User Authentication",
    "math": "Access control",
    "note": "This section covers Django's built-in authentication system. It explains how to handle user registration, login, and logout using Django's provided views and forms, and how to protect views with the `@login_required` decorator."
  },
  {
    "n": 16,
    "title": "Advanced User Management",
    "math": "Permissions",
    "note": "This lesson covers how and when to extend the default User model with a custom one. It also explains how to use Django's built-in Groups and Permissions framework for more granular, role-based access control."
  },
  {
    "n": 17,
    "title": "Managing Static and Media Files",
    "math": "File systems",
    "note": "Explains how to manage static files (CSS, JS, images) and user-uploaded media files. The lesson covers the necessary configuration (`STATIC_URL`, `MEDIA_ROOT`) and the `collectstatic` command for deployment."
  },
  {
    "n": 18,
    "title": "Django Middleware",
    "math": "Request/response lifecycle",
    "note": "A dedicated lesson explaining the middleware request-response lifecycle. It covers how to inspect the built-in middleware that Django uses (e.g., for sessions and authentication) and how to write a simple custom middleware class."
  },
  {
    "n": 19,
    "title": "Django Signals",
    "math": "Event-driven programming",
    "note": "This lesson introduces signals, which allow certain senders to notify a set of receivers that some action has taken place. It explains how to use built-in signals (like `post_save`) and create custom ones for decoupled application logic."
  },
  {
    "n": 20,
    "title": "Testing in Django",
    "math": "Test-driven development",
    "note": "Provides an introduction to writing tests for a Django application. The lesson covers creating unit tests for models and views using Python's `unittest` framework and Django's test client to simulate requests."
  },
  {
    "n": 21,
    "title": "Advanced Testing Techniques",
    "math": "Test fixtures",
    "note": "This lesson builds on the testing introduction. It covers strategies for more complex testing, including using fixtures for test data (e.g., with `pytest-django`) and how to effectively test code that relies on external services by using mocking."
  },
  {
    "n": 22,
    "title": "Introduction to Django REST Framework (DRF)",
    "math": "API design",
    "note": "This section introduces DRF as a powerful toolkit for building Web APIs. It covers the basic concepts of serializers (for converting querysets to JSON), viewsets, and routers for quickly creating a RESTful API."
  },
  {
    "n": 23,
    "title": "Asynchronous Django",
    "math": "Asynchronous programming",
    "note": "This lesson introduces Django's async capabilities (Django 3.1+). It explains how to write `async` views to handle many concurrent connections efficiently, and discusses its benefits for I/O-bound operations like long-polling or websockets."
  },
  {
    "n": 24,
    "title": "Background Tasks with Celery",
    "math": "Task queues",
    "note": "A lesson on offloading long-running tasks from the request-response cycle. It introduces the concept of a task queue and demonstrates a typical setup using Celery as the task worker and Redis as the message broker to handle tasks like sending emails."
  },
  {
    "n": 25,
    "title": "Performance and Optimization",
    "math": "Query optimization",
    "note": "This section explores techniques for optimizing a Django application. It covers query optimization with `select_related` and `prefetch_related`, database indexing, and using Django's caching framework to reduce database load."
  },
  {
    "n": 26,
    "title": "Settings and Deployment",
    "math": "Deployment strategy",
    "note": "Covers the process of deploying a Django application to production. It discusses best practices for managing settings (e.g., using environment variables for secrets), the role of a WSGI server (e.g., Gunicorn), and serving static files with a web server like Nginx."
  }
]
