[
  {
    "n": 1,
    "title": "Module 1: Introduction - What is Unix?",
    "math": "N/A",
    "note": "Introduce Unix as a family of multitasking, multiuser computer operating systems. Discuss its history and lineage, from Bell Labs to modern systems like Linux and macOS."
  },
  {
    "n": 2,
    "title": "The Unix Philosophy",
    "math": "N/A",
    "note": "Explain the core tenets of the Unix philosophy: write programs that do one thing and do it well; write programs to work together; write programs to handle text streams, as that is a universal interface."
  },
  {
    "n": 3,
    "title": "The Kernel and the Shell",
    "math": "N/A",
    "note": "Explain the two core components: the Kernel (manages system resources) and the Shell (a command-line interpreter like Bash that provides the user interface to the kernel)."
  },
  {
    "n": 4,
    "title": "Module 2: Basic Commands - `ls`",
    "math": "N/A",
    "note": "Introduce `ls` for listing directory contents. Cover common options like `-l` (long format), `-a` (all files), and `-h` (human-readable)."
  },
  {
    "n": 5,
    "title": "`cd`, `pwd`, and `mkdir`",
    "math": "N/A",
    "note": "Cover basic navigation: `cd` (change directory), `pwd` (print working directory), and `mkdir` (make directory)."
  },
  {
    "n": 6,
    "title": "`cp`, `mv`, and `rm`",
    "math": "N/A",
    "note": "Cover file manipulation: `cp` (copy), `mv` (move/rename), and `rm` (remove). Explain the `-r` (recursive) and `-i` (interactive) flags."
  },
  {
    "n": 7,
    "title": "Viewing Files: `cat`, `less`, `more`",
    "math": "N/A",
    "note": "Introduce tools for viewing text files: `cat` (concatenate/print), `less` (a modern pager), and `more` (the original pager)."
  },
  {
    "n": 8,
    "title": "Viewing Files: `head` and `tail`",
    "math": "N/A",
    "note": "Show how to view the beginning (`head`) or end (`tail`) of a file. Introduce the `-n` (number of lines) and `-f` (follow) options."
  },
  {
    "n": 9,
    "title": "Module 3: The Filesystem - The FHS",
    "math": "N/A",
    "note": "Explain the Filesystem Hierarchy Standard (FHS). Describe the purpose of key directories like `/bin`, `/etc`, `/home`, `/var`, and `/usr`."
  },
  {
    "n": 10,
    "title": "File Types",
    "math": "N/A",
    "note": "Describe the different types of files in Unix: regular files, directories, symbolic links, block devices, character devices, sockets, and pipes."
  },
  {
    "n": 11,
    "title": "Hard and Symbolic Links",
    "math": "Pointers",
    "note": "Explain the difference between hard links (multiple names for the same inode) and symbolic links (pointers to a file path). Use `ln` and `ln -s` to create them."
  },
  {
    "n": 12,
    "title": "Permissions: `chmod` (Symbolic)",
    "math": "N/A",
    "note": "Detail the Unix permissions model (read, write, execute for user, group, other). Teach how to change permissions using `chmod` with symbolic notation (e.g., `u+x`, `g-w`)."
  },
  {
    "n": 13,
    "title": "Permissions: `chmod` (Octal)",
    "math": "Bitwise Operations",
    "note": "Teach how to change permissions using `chmod` with octal notation (e.g., `755`, `644`)."
  },
  {
    "n": 14,
    "title": "Ownership: `chown` and `chgrp`",
    "math": "N/A",
    "note": "Explain file ownership. Teach how to change the user owner with `chown` and the group owner with `chgrp`."
  },
  {
    "n": 15,
    "title": "Finding Files: `find`",
    "math": "Tree Traversal",
    "note": "Introduce the `find` command. Cover searching by name (`-name`), type (`-type`), and executing commands on found files (`-exec`)."
  },
  {
    "n": 16,
    "title": "Module 4: I/O and Pipes - Standard Streams",
    "math": "N/A",
    "note": "Introduce the three standard streams: stdin (0), stdout (1), and stderr (2)."
  },
  {
    "n": 17,
    "title": "Redirecting Output (`>` and `>>`)",
    "math": "N/A",
    "note": "Explain how to redirect stdout to a file, overwriting (`>`) or appending (`>>`)."
  },
  {
    "n": 18,
    "title": "Redirecting Input (`<`) and Error (`2>`)",
    "math": "N/A",
    "note": "Explain how to redirect stdin from a file (`<`) and how to redirect stderr (`2>`)."
  },
  {
    "n": 19,
    "title": "Pipes (`|`)",
    "math": "Data Pipelines",
    "note": "Introduce the pipe `|` operator to connect the stdout of one command to the stdin of another, forming powerful command chains."
  },
  {
    "n": 20,
    "title": "The `tee` Command",
    "math": "N/A",
    "note": "Introduce the `tee` command to split the output of a command, sending it to both a file and to standard output."
  },
  {
    "n": 21,
    "title": "Module 5: Text Processing - `grep`",
    "math": "Regular Expressions",
    "note": "Introduce `grep` for searching text. Cover basic regex and common options like `-i`, `-v`, and `-r`."
  },
  {
    "n": 22,
    "title": "`sort`, `uniq`, and `wc`",
    "math": "N/A",
    "note": "Cover sorting lines (`sort`), filtering duplicate lines (`uniq`), and counting lines, words, and bytes (`wc`)."
  },
  {
    "n": 23,
    "title": "`cut` and `paste`",
    "math": "N/A",
    "note": "Teach how to extract columns of text with `cut` and merge lines of files with `paste`."
  },
  {
    "n": 24,
    "title": "`sed`, the Stream Editor",
    "math": "N/A",
    "note": "Introduce `sed` for performing find-and-replace and other text transformations on a stream of text."
  },
  {
    "n": 25,
    "title": "`awk`, the Pattern-Scanning Language",
    "math": "N/A",
    "note": "Introduce `awk` for processing structured, column-based text data with powerful scripting capabilities."
  },
  {
    "n": 26,
    "title": "Module 6: Process Management - Viewing Processes",
    "math": "N/A",
    "note": "Teach how to view running processes using `ps` with different options (e.g., `aux`) and `top` for a real-time view."
  },
  {
    "n": 27,
    "title": "Job Control",
    "math": "N/A",
    "note": "Explain how to run processes in the background (`&`), view background jobs (`jobs`), and bring them to the foreground (`fg`) or background (`bg`)."
  },
  {
    "n": 28,
    "title": "Sending Signals with `kill`",
    "math": "N/A",
    "note": "Introduce the `kill` command to send signals to processes, such as `SIGTERM` (terminate gracefully) and `SIGKILL` (force terminate)."
  },
  {
    "n": 29,
    "title": "Module 7: Shell Scripting - Creating a Script",
    "math": "N/A",
    "note": "Show how to create a basic shell script with a `#!/bin/bash` shebang and make it executable with `chmod +x`."
  },
  {
    "n": 30,
    "title": "Variables and Quoting",
    "math": "N/A",
    "note": "Teach how to define and use variables. Explain the critical difference between double quotes (expansion) and single quotes (no expansion)."
  },
  {
    "n": 31,
    "title": "Command Substitution",
    "math": "N/A",
    "note": "Show how to capture the output of a command into a variable using `$(command)`."
  },
  {
    "n": 32,
    "title": "Conditionals with `if` and `test`",
    "math": "Boolean Logic",
    "note": "Introduce the `if...then...else...fi` structure. Explain how to use the `test` command or `[[ ... ]]` for string and numeric comparisons."
  },
  {
    "n": 33,
    "title": "Loops: `for` and `while`",
    "math": "N/A",
    "note": "Show how to create `for` loops to iterate over lists and `while` loops to repeat commands as long as a condition is true."
  },
  {
    "n": 34,
    "title": "Functions",
    "math": "N/A",
    "note": "Teach how to define and call functions within a shell script to organize code."
  },
  {
    "n": 35,
    "title": "Module 8: Final Project - System Automation Script",
    "math": "N/A",
    "note": "Outline the final project: write a shell script that automates a common system administration task, such as creating a compressed backup of a user's home directory and emailing a status report."
  },
  {
    "n": 36,
    "title": "Final Project: Script Structure and Arguments",
    "math": "N/A",
    "note": "Design the script to accept a username as a command-line argument and include functions for each major step (backup, compress, report)."
  },
  {
    "n": 37,
    "title": "Final Project: The Backup Logic",
    "math": "N/A",
    "note": "Write the core logic using `tar` and `gzip` to create a timestamped, compressed archive of the specified user's home directory."
  },
  {
    "n": 38,
    "title": "Final Project: Error Handling and Reporting",
    "math": "N/A",
    "note": "Add checks to ensure the user exists and the backup was created successfully. Write a status report to a log file and use `mail` to send it to the administrator."
  },
  {
    "n": 39,
    "title": "Module 9: Further Reading",
    "math": "N/A",
    "note": "Provide links to classic Unix books (e.g., 'The UNIX Programming Environment'), advanced shell scripting guides, and resources on different shells like `zsh`."
  }
]
