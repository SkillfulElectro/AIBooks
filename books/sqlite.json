[
  {
    "n": 1,
    "title": "What is SQLite?",
    "math": "File I/O operations",
    "note": "Defines SQLite's unique serverless, self-contained, zero-configuration, and transactional nature. Discusses ideal use cases like embedded devices, application file formats, and development/testing."
  },
  {
    "n": 2,
    "title": "Getting Started with the SQLite CLI",
    "math": "Command-line syntax",
    "note": "A hands-on guide to the SQLite command-line interface (CLI). Covers creating a database, and executing '.dot' commands like '.help', '.databases', and '.tables'."
  },
  {
    "n": 3,
    "title": "Data Definition (DDL): CREATE, ALTER, DROP",
    "math": "Schema design",
    "note": "Covers the primary DDL commands: `CREATE TABLE` to define tables, `ALTER TABLE` to modify them, and `DROP TABLE` to delete them. Introduces SQLite's dynamic data types (NULL, INTEGER, REAL, TEXT, BLOB)."
  },
  {
    "n": 4,
    "title": "Data Manipulation (DML): INSERT, UPDATE, DELETE",
    "math": "CRUD operations",
    "note": "Focuses on managing data within tables. Provides examples of `INSERT` to add rows, `UPDATE` to modify rows, and `DELETE` to remove rows."
  },
  {
    "n": 5,
    "title": "Basic Queries: SELECT, WHERE, ORDER BY, LIMIT",
    "math": "Boolean logic & Sorting",
    "note": "Introduces the `SELECT` statement, filtering with `WHERE`, sorting with `ORDER BY`, and restricting results with `LIMIT`. Also covers `DISTINCT` for unique values."
  },
  {
    "n": 6,
    "title": "Aggregate Functions and GROUP BY",
    "math": "Statistical functions",
    "note": "Teaches how to perform calculations on sets of rows using `COUNT`, `SUM`, `AVG`, `MIN`, and `MAX`. Explains the use of `GROUP BY` to apply aggregates to groups of rows."
  },
  {
    "n": 7,
    "title": "Combining Data with JOINs (INNER, LEFT)",
    "math": "Set intersection",
    "note": "Explains how to retrieve data from multiple tables in a single query using `INNER JOIN` for matching values and `LEFT JOIN` for including all records from the left table."
  },
  {
    "n": 8,
    "title": "Advanced Querying: Common Table Expressions (CTEs)",
    "math": "Modular arithmetic",
    "note": "Introduces CTEs (using the `WITH` clause) as a way to create temporary, named result sets to improve the readability and structure of complex queries."
  },
  {
    "n": 9,
    "title": "Advanced Querying: Window Functions",
    "math": "Data analysis",
    "note": "Explores window functions (`OVER`, `PARTITION BY`) which perform calculations across a set of rows related to the current row. Covers `ROW_NUMBER`, `RANK`, `LEAD`, and `LAG`."
  },
  {
    "n": 10,
    "title": "Data Integrity with Constraints",
    "math": "Rule-based systems",
    "note": "Covers enforcing data rules with constraints: `PRIMARY KEY`, `FOREIGN KEY`, `UNIQUE`, `NOT NULL`, and `CHECK`."
  },
  {
    "n": 11,
    "title": "Speeding Up Queries with Indexes",
    "math": "B-tree data structure",
    "note": "Explains how `CREATE INDEX` can improve data retrieval performance and discusses the trade-offs of using indexes."
  },
  {
    "n": 12,
    "title": "Understanding Transactions (ACID)",
    "math": "ACID properties",
    "note": "Covers grouping SQL statements into an all-or-nothing transaction using `BEGIN`, `COMMIT`, and `ROLLBACK`. Explains the ACID properties in the context of SQLite."
  },
  {
    "n": 13,
    "title": "Simplifying Queries with Views",
    "math": "Abstraction",
    "note": "Learn how to use `CREATE VIEW` to encapsulate complex queries. A view is a stored SQL query that acts like a virtual table, simplifying data access and enhancing security."
  },
  {
    "n": 14,
    "title": "Configuring SQLite with PRAGMA",
    "math": "Parameter tuning",
    "note": "Introduces the `PRAGMA` command for querying and modifying the SQLite library's operation. Covers key pragmas like `foreign_keys=ON`, `journal_mode`, and `synchronous` for configuration."
  },
  {
    "n": 15,
    "title": "Extension: Full-Text Search with FTS5",
    "math": "Information retrieval",
    "note": "Explores the powerful FTS5 extension for advanced text searching. Covers creating virtual FTS tables and using the `MATCH` operator to perform efficient and complex searches on text data."
  },
  {
    "n": 16,
    "title": "Extension: Working with JSON Data (json1)",
    "math": "Semi-structured data querying",
    "note": "Introduces the `json1` extension for storing and manipulating JSON. Covers functions like `json_extract()` and `json_object()` for querying and working with JSON documents inside SQLite."
  },
  {
    "n": 17,
    "title": "Backup and Restore Strategies",
    "math": "Data redundancy",
    "note": "Discusses strategies for backing up a file-based database. Covers simple file copying and introduces the Online Backup API for performing live backups without service interruption."
  },
  {
    "n": 18,
    "title": "Using SQLite with Python",
    "math": "API integration",
    "note": "Demonstrates how to interact with an SQLite database programmatically using Python's built-in `sqlite3` module. Covers connecting, executing queries, and fetching results."
  }
]
