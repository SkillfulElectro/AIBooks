[
  {
    "n": 1,
    "title": "What Is TinyDB?",
    "math": "Document-oriented databases",
    "note": "Introduces TinyDB as a simple, lightweight, document-oriented database written in pure Python. Explains its serverless nature and ideal use cases for small apps, tools, and IoT devices."
  },
  {
    "n": 2,
    "title": "Getting Started: Installation and Basic Operations",
    "math": "CRUD operations",
    "note": "Covers installing with `pip` and creating a database. Demonstrates the essential operations: `.insert()` to add documents, `.all()` to retrieve all documents, and `.truncate()` to clear a table."
  },
  {
    "n": 3,
    "title": "Searching for Documents with the Query Object",
    "math": "Querying",
    "note": "Introduces the core searching mechanism. Explains how to create a `Query` object and use it with the `db.search()` method to find documents where a field has an exact value."
  },
  {
    "n": 4,
    "title": "Advanced Searches (Regex, Existence, Custom Tests)",
    "math": "Complex queries",
    "note": "Covers more advanced search capabilities, including using comparisons (`!=`, `>`, `<`), checking for a key's existence with `.exists()`, and matching patterns with `.matches()` or `.search()`."
  },
  {
    "n": 5,
    "title": "Combining Queries with Logical Operators",
    "math": "Logical operators (AND, OR, NOT)",
    "note": "Explains how to build more complex queries by combining simpler ones using `&` (AND), `|` (OR), and `~` (NOT). Emphasizes the need for parentheses around conditions."
  },
  {
    "n": 6,
    "title": "Querying Nested Documents and Lists",
    "math": "Nested queries",
    "note": "A key lesson on real-world querying. Demonstrates how to search within nested documents using dot notation (e.g., `User.address.city == 'Berlin'`). Also covers searching in lists with `.any()` and `.all()`."
  },
  {
    "n": 7,
    "title": "Updating and Upserting Documents",
    "math": "Update & Upsert operations",
    "note": "Covers modifying documents with `.update()` and the convenient `.upsert()` method, which updates a document if it exists or inserts it if it doesn't."
  },
  {
    "n": 8,
    "title": "Deleting Documents",
    "math": "Delete operation",
    "note": "Covers how to remove documents from the database using the `.remove()` method, which takes a query to specify which documents to delete."
  },
  {
    "n": 9,
    "title": "Working with Multiple Tables",
    "math": "Database tables",
    "note": "Explains that a single TinyDB database file can contain multiple tables. Demonstrates the `db.table('table_name')` method to get a reference to a specific table."
  },
  {
    "n": 10,
    "title": "Introduction to Middleware",
    "math": "Middleware",
    "note": "Introduces the concept of Middleware, which allows you to wrap and modify the storage behavior, for example, by adding a caching layer or logging."
  },
  {
    "n": 11,
    "title": "Practical Middleware: Data Validation",
    "math": "Schema validation",
    "note": "Provides a practical example of middleware for data validation. Shows the concept of intercepting a write operation to validate a document against a schema (e.g., using a library like Pydantic) before it's saved."
  },
  {
    "n": 12,
    "title": "Concurrency and Thread Safety",
    "math": "Concurrency control",
    "note": "Explains that the default JSON storage is not thread-safe. Discusses strategies for using TinyDB in a multi-threaded application, such as creating a custom thread-safe middleware using a `threading.Lock`."
  },
  {
    "n": 13,
    "title": "Creating Custom Storage",
    "math": "Storage engines",
    "note": "Briefly covers the ability to create a completely custom storage engine (e.g., to store data in YAML, a remote database, or an encrypted file) by implementing the `Storage` API."
  },
  {
    "n": 14,
    "title": "Project: A Command-Line To-Do List Application",
    "math": "Application development",
    "note": "A practical project to tie all the concepts together. Walks through building a simple command-line to-do list application where tasks are stored and managed in a TinyDB database."
  }
]
