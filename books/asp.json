[
  {
    "n": 1,
    "title": "Introduction to the .NET Ecosystem",
    "math": "Platform architecture",
    "note": "This section provides a high-level overview of the .NET platform. It explains the evolution from the legacy .NET Framework to the modern, open-source, and cross-platform .NET (previously .NET Core). The roles of the .NET SDK (for building apps) and the .NET Runtime (for running them) are defined."
  },
  {
    "n": 2,
    "title": "What is ASP.NET Core?",
    "math": "Web framework design",
    "note": "This lesson introduces ASP.NET Core as the modern framework for building web apps and services with .NET. Its key features are highlighted: high performance, cross-platform support (Windows, macOS, Linux), and open-source nature. It is contrasted with the legacy, Windows-only ASP.NET Framework."
  },
  {
    "n": 3,
    "title": "Setting Up Your Development Environment",
    "math": "Software installation and PATH configuration",
    "note": "This section provides a step-by-step guide to setting up a development environment for ASP.NET Core. It covers installing the .NET SDK and a code editor like Visual Studio Code, along with recommended extensions for C# development."
  },
  {
    "n": 4,
    "title": "Creating Your First Application with the .NET CLI",
    "math": "Command-line interface (CLI) usage",
    "note": "This lesson demonstrates how to create and run a new ASP.NET Core application using the .NET Command-Line Interface. It covers the `dotnet new` command to create a project from a template (e.g., 'webapi' or 'mvc'), `dotnet build` to compile it, and `dotnet run` to launch the application."
  },
  {
    "n": 5,
    "title": "The ASP.NET Core Request Pipeline and Middleware",
    "math": "Pipeline processing model",
    "note": "This section explains the fundamental concept of the request pipeline in ASP.NET Core. It describes how incoming HTTP requests are processed by a series of 'middleware' components, each of which can handle the request or pass it to the next component in the pipeline. The `Program.cs` file is identified as the place where this pipeline is configured."
  },
  {
    "n": 6,
    "title": "Configuring Middleware",
    "math": "Function chaining",
    "note": "This lesson demonstrates how to add and configure middleware components in `Program.cs`. It covers common middleware like `UseRouting`, `UseAuthentication`, `UseAuthorization`, and `MapControllers`. The importance of middleware order is emphasized."
  },
  {
    "n": 7,
    "title": "Dependency Injection (DI) in ASP.NET Core",
    "math": "Inversion of Control (IoC)",
    "note": "This section introduces Dependency Injection as a first-class citizen in ASP.NET Core. It explains how DI allows for loosely coupled code by 'injecting' dependencies (services) into classes (like controllers) rather than having the classes create them. The built-in DI container is discussed."
  },
  {
    "n": 8,
    "title": "Service Lifetimes: Singleton, Scoped, and Transient",
    "math": "Object lifecycle management",
    "note": "This lesson details the three service lifetimes available in the ASP.NET Core DI container. It explains Singleton (one instance for the app's lifetime), Scoped (one instance per client request), and Transient (a new instance every time it's requested), and provides guidance on when to use each."
  },
  {
    "n": 9,
    "title": "Configuration Management",
    "math": "Key-value data structures",
    "note": "This section covers how to manage application settings. It focuses on the `appsettings.json` file and its environment-specific variants (e.g., `appsettings.Development.json`). It demonstrates how to read configuration values in your application using the `IConfiguration` service."
  },
  {
    "n": 10,
    "title": "Introduction to Building Web APIs",
    "math": "RESTful API principles",
    "note": "This lesson introduces the concept of building RESTful Web APIs with ASP.NET Core. It explains how APIs are used to expose application functionality and data over HTTP to be consumed by various clients, such as single-page applications (SPAs) or mobile apps."
  },
  {
    "n": 11,
    "title": "Creating an API Controller",
    "math": "Controller class design",
    "note": "This section demonstrates how to create a controller for a Web API. It covers creating a class that inherits from `ControllerBase` and is decorated with the `[ApiController]` attribute, which enables helpful API-specific behaviors."
  },
  {
    "n": 12,
    "title": "API Routing and Action Methods",
    "math": "Attribute-based routing",
    "note": "This lesson explains how incoming requests are routed to specific methods within an API controller. It focuses on attribute routing, where HTTP method attributes like `[HttpGet]`, `[HttpPost]`, `[HttpPut]`, and `[HttpDelete]` are used to define the endpoints."
  },
  {
    "n": 13,
    "title": "Action Results in Web API",
    "math": "HTTP status codes",
    "note": "This section covers how to return appropriate HTTP responses from API action methods. It explains the use of helper methods like `Ok()`, `NotFound()`, `BadRequest()`, and `CreatedAtAction()` to return data along with standard HTTP status codes that clearly communicate the result of the operation."
  },
  {
    "n": 14,
    "title": "Introduction to MVC (Model-View-Controller)",
    "math": "Model-View-Controller pattern",
    "note": "This lesson introduces the MVC pattern as a way to build UI-driven web applications in ASP.NET Core. It explains the separation of concerns: the Model (data), the View (UI), and the Controller (handles user input and orchestrates the other two)."
  },
  {
    "n": 15,
    "title": "The Razor View Engine",
    "math": "Server-side templating",
    "note": "This section introduces Razor, the view engine used by ASP.NET Core. It demonstrates the syntax, which uses the `@` character to embed C# code directly within HTML markup, allowing for the dynamic rendering of content based on data from the controller."
  },
  {
    "n": 16,
    "title": "Passing Data to MVC Views",
    "math": "Data binding",
    "note": "This lesson covers the different ways to pass data from a controller to a view. It explains the use of `ViewData` and `ViewBag` for weakly-typed data, and strongly-typed models (view models), which is the recommended approach for robust applications."
  },
  {
    "n": 17,
    "title": "Introduction to Razor Pages",
    "math": "Page-centric architecture",
    "note": "This lesson introduces Razor Pages, a simpler, page-focused model for building web UIs in ASP.NET Core. It contrasts with the controller-centric MVC pattern and explains how the code-behind file for a page is tightly coupled to the Razor view, which is ideal for simple forms and pages."
  },
  {
    "n": 18,
    "title": "Introduction to Entity Framework (EF) Core",
    "math": "Object-Relational Mapping (ORM)",
    "note": "This section introduces Entity Framework Core as the standard ORM for .NET. It explains how EF Core allows developers to work with a database using .NET objects, eliminating the need to write most data-access code (like SQL queries) manually."
  },
  {
    "n": 19,
    "title": "The DbContext and Data Models",
    "math": "Database schema mapping",
    "note": "This lesson explains the core components of EF Core. It demonstrates how to create data model classes (POCOs) that represent database tables and a `DbContext` class that represents a session with the database and allows you to query and save data."
  },
  {
    "n": 20,
    "title": "Querying Data with LINQ",
    "math": "Language-Integrated Query (LINQ)",
    "note": "This section covers how to retrieve data from the database using LINQ. It demonstrates how to write queries in C# using LINQ syntax (e.g., `Where`, `OrderBy`, `Select`), which EF Core then translates into SQL to execute against the database."
  },
  {
    "n": 21,
    "title": "Adding, Updating, and Deleting Data",
    "math": "CRUD operations",
    "note": "This lesson explains how to perform data modification operations with EF Core. It covers the `Add`, `Update`, and `Remove` methods on the `DbSet`, and the `SaveChanges` method on the `DbContext`, which persists all the tracked changes to the database."
  },
  {
    "n": 22,
    "title": "EF Core Migrations",
    "math": "Schema versioning",
    "note": "This section introduces EF Core Migrations, a feature for managing database schema changes over time. It demonstrates how to use `dotnet ef migrations add` to create a new migration based on changes to your data models and `dotnet ef database update` to apply those changes to the database."
  },
  {
    "n": 23,
    "title": "Authentication vs. Authorization",
    "math": "Security principles",
    "note": "This lesson clarifies two fundamental security concepts. Authentication is the process of verifying who a user is. Authorization is the process of determining whether a user has permission to do something. This provides the foundation for securing an application."
  },
  {
    "n": 24,
    "title": "Introduction to ASP.NET Core Identity",
    "math": "Membership systems",
    "note": "This section introduces ASP.NET Core Identity, the built-in framework for adding user login functionality to an application. It provides services for user management (registration, passwords) and is the standard way to implement cookie-based authentication in a web UI application."
  },
  {
    "n": 25,
    "title": "JWT Authentication for Web APIs",
    "math": "JSON Web Tokens (JWT)",
    "note": "This lesson covers how to secure stateless Web APIs using JSON Web Tokens. It explains the structure of a JWT and the process: a user logs in, receives a token, and then includes that token in the header of subsequent requests to prove their identity."
  },
  {
    "n": 26,
    "title": "Authorization with the `[Authorize]` Attribute",
    "math": "Declarative security",
    "note": "This section demonstrates the simplest way to implement authorization. It explains how to apply the `[Authorize]` attribute to controllers or action methods to restrict access to authenticated users only. Role-based authorization (e.g., `[Authorize(Roles = 'Admin')]`) is also covered."
  },
  {
    "n": 27,
    "title": "Logging and Error Handling",
    "math": "Exception handling and logging frameworks",
    "note": "This lesson covers two crucial aspects of production applications. It introduces the built-in logging framework and the `ILogger` interface for writing log messages. It also demonstrates how to use developer exception pages and custom error handling middleware to manage errors gracefully."
  },
  {
    "n": 28,
    "title": "Introduction to Blazor",
    "math": "Component-based UI",
    "note": "This section provides a brief introduction to Blazor, a framework for building interactive, client-side web UI with C# instead of JavaScript. It explains the two hosting models, Blazor Server and Blazor WebAssembly, and their respective trade-offs."
  },
  {
    "n": 29,
    "title": "Real-time Apps with SignalR",
    "math": "WebSocket communication",
    "note": "This lesson introduces SignalR, a framework for adding real-time web functionality to apps. It explains how SignalR simplifies using protocols like WebSockets to enable server-side code to push content to clients instantly, which is ideal for chat apps or live dashboards."
  },
  {
    "n": 30,
    "title": "High-Performance APIs with gRPC",
    "math": "Remote Procedure Call (RPC)",
    "note": "This section covers gRPC as a modern, high-performance alternative to REST for building APIs. It explains its contract-first approach using Protocol Buffers and its benefits, such as efficiency and strong typing, making it suitable for microservices communication."
  },
  {
    "n": 31,
    "title": "Testing in ASP.NET Core",
    "math": "Test-driven development (TDD)",
    "note": "This lesson provides an overview of testing strategies. It introduces unit testing for business logic and controllers, and integration testing for testing multiple components of the application together, including the request pipeline and database access, using the `WebApplicationFactory`."
  },
  {
    "n": 32,
    "title": "Deploying to Linux",
    "math": "Reverse proxy configuration",
    "note": "This lesson covers the common scenario of deploying an ASP.NET Core application to a Linux server. It explains the role of a reverse proxy server like Nginx or Apache to handle incoming requests and forward them to the Kestrel web server running the .NET application."
  },
  {
    "n": 33,
    "title": "Containerizing with Docker",
    "math": "Containerization",
    "note": "This final lesson introduces Docker as a way to package and run an ASP.NET Core application in a container. It covers creating a `Dockerfile`, building a container image, and running the container, which provides a consistent environment for development and production."
  }
]
