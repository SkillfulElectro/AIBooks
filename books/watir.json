[
  {
    "n": 1,
    "title": "Introduction to Watir",
    "math": "Browser automation libraries",
    "note": "Introduces Watir (Web Application Testing in Ruby) as an open-source Ruby library for automating web browsers, known for its simple and human-readable API."
  },
  {
    "n": 2,
    "title": "Setting Up a Watir Project",
    "math": "RubyGems",
    "note": "Covers installing the `watir` and `webdrivers` gems to get started with a new project."
  },
  {
    "n": 3,
    "title": "Launching and Controlling a Browser",
    "math": "Browser session management",
    "note": "Demonstrates launching a browser with `Watir::Browser.new`, navigating with `.goto`, and closing with `.close`."
  },
  {
    "n": 4,
    "title": "Locating Elements: The Basics",
    "math": "Element locators",
    "note": "Introduces Watir's intuitive syntax for finding elements using methods like `browser.text_field`, `browser.button`, and specifying them with attributes like `:id`, `:name`, or `:text`."
  },
  {
    "n": 5,
    "title": "Advanced Locators: CSS and XPath",
    "math": "CSS Selectors & XPath",
    "note": "Explains how to locate elements that lack simple identifiers by using the powerful `css` and `xpath` locators, e.g., `browser.element(css: 'div#main > p')`."
  },
  {
    "n": 6,
    "title": "Interacting with Elements",
    "math": "User action simulation",
    "note": "Covers the most common interactions: `.set` for text fields, `.click` for buttons/links, and `.select` for dropdown lists. Also covers checking state with `.selected?`."
  },
  {
    "n": 7,
    "title": "Getting Information from Elements",
    "math": "Data extraction",
    "note": "Covers how to retrieve data, such as getting the visible text with `.text` or the value of an HTML attribute with `.attribute_value('href')`."
  },
  {
    "n": 8,
    "title": "Waits and Synchronization",
    "math": "Synchronization",
    "note": "Explains that Watir has built-in automatic waits. Also covers explicit waits for specific conditions, such as `.wait_until_present` or `.wait_while_present`."
  },
  {
    "n": 9,
    "title": "Working with Collections of Elements",
    "math": "Element collections",
    "note": "Introduces the pluralized element methods, like `browser.divs`, which return a collection that can be iterated over or accessed by index."
  },
  {
    "n": 10,
    "title": "Handling Frames and iFrames",
    "math": "Frame context switching",
    "note": "Explains how to interact with elements inside an iframe. Demonstrates finding an iframe element and then using it as the context for subsequent searches, e.g., `browser.iframe(id: 'content').text_field(...)`."
  },
  {
    "n": 11,
    "title": "Handling Multiple Windows and Tabs",
    "math": "Window context switching",
    "note": "Covers how to manage multiple browser windows or tabs. Demonstrates `browser.windows` to get a collection of windows and `browser.window.use(...)` to switch focus between them."
  },
  {
    "n": 12,
    "title": "Handling JavaScript Alerts, Prompts, and Confirms",
    "math": "Alert handling",
    "note": "Explains how to work with JavaScript pop-ups. Demonstrates using `browser.alert` to get its text, accept it with `.ok`, or dismiss it with `.close`."
  },
  {
    "n": 13,
    "title": "Executing JavaScript",
    "math": "Script execution",
    "note": "Introduces the `browser.execute_script` method as a powerful tool for performing actions or retrieving information that is difficult to do with standard Watir commands."
  },
  {
    "n": 14,
    "title": "Managing Browser Cookies",
    "math": "Cookie management",
    "note": "Covers how to interact with browser cookies. Demonstrates `browser.cookies.add` to set a cookie, `browser.cookies.delete` to remove one, and `browser.cookies.clear`."
  },
  {
    "n": 15,
    "title": "Handling File Uploads",
    "math": "File input simulation",
    "note": "Explains how to automate file uploads by finding an `<input type='file'>` element (a `FileField` in Watir) and using the `.set` method with the local path to the file."
  },
  {
    "n": 16,
    "title": "Structuring Tests with the Page Object Model (POM)",
    "math": "Design patterns",
    "note": "Introduces the Page Object Model design pattern. Explains how to create a Ruby class for each page of an application that encapsulates its elements and user interactions."
  },
  {
    "n": 17,
    "title": "Using Watir with the RSpec Framework",
    "math": "Testing frameworks",
    "note": "Demonstrates how to structure Watir tests using RSpec. Covers using `before` and `after` blocks for browser setup/teardown and writing expectations with `expect`."
  },
  {
    "n": 18,
    "title": "Data-Driven Testing",
    "math": "Data-driven design",
    "note": "Explains the concept of data-driven testing. Provides a conceptual example of reading test data from a CSV file and using it to run a single RSpec test multiple times with different inputs and expected outcomes."
  },
  {
    "n": 19,
    "title": "Headless Testing and Screenshots",
    "math": "Headless browsers",
    "note": "Explains how to run tests without a visible browser using the `headless: true` option, which is essential for CI/CD. Also covers taking screenshots for debugging with `browser.screenshot.save`."
  }
]
