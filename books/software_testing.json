[
  {
    "n": 1,
    "title": "What Is Software Testing?",
    "math": "Quality assurance",
    "note": "This section provides a formal definition of Software Testing as an investigation conducted to provide stakeholders with information about the quality of the software product or service under test. It explains that the primary goal is to identify defects so that they can be fixed."
  },
  {
    "n": 2,
    "title": "The 7 Principles of Testing",
    "math": "Testing principles",
    "note": "This lesson covers the seven fundamental principles of software testing. These include 'Testing shows presence of defects, not absence', 'Exhaustive testing is impossible', 'Early testing saves time and money', and the 'Pesticide paradox'."
  },
  {
    "n": 3,
    "title": "The Software Testing Life Cycle (STLC)",
    "math": "Process model",
    "note": "Introduces the STLC as a sequence of activities conducted during the testing process. It outlines the phases: Requirement Analysis, Test Planning, Test Case Development, Test Environment Setup, Test Execution, and Test Cycle Closure."
  },
  {
    "n": 4,
    "title": "Test Strategy, Planning, and Estimation",
    "math": "Estimation techniques",
    "note": "Covers the management aspects of testing. Defines Test Strategy (the overall approach), Test Planning (the specific implementation), and introduces techniques for estimating the effort and time required for testing."
  },
  {
    "n": 5,
    "title": "Levels of Testing: Unit, Integration, System, and UAT",
    "math": "Testing levels",
    "note": "Explains the primary levels of testing: Unit Testing (code-level), Integration Testing (component interaction), System Testing (end-to-end evaluation against requirements), and User Acceptance Testing (UAT) for client verification."
  },
  {
    "n": 6,
    "title": "Functional vs. Non-functional Testing",
    "math": "Test classification",
    "note": "Differentiates between the two main categories of testing. Functional testing verifies *what* the system does (the features). Non-functional testing verifies *how well* the system does it, checking aspects like performance, usability, and reliability."
  },
  {
    "n": 7,
    "title": "Key Functional Test Type: Regression Testing",
    "math": "Regression testing",
    "note": "Explains Regression Testing, the process of re-running tests to ensure that recently added code changes have not adversely affected existing features. This is crucial for preventing 'regressions' (bugs in existing functionality)."
  },
  {
    "n": 8,
    "title": "Exploring Non-Functional Testing",
    "math": "Performance, Security, Usability",
    "note": "Dives into specific types of non-functional testing. Covers Performance Testing (load, stress), Security Testing (vulnerability analysis), Usability Testing (user-friendliness), and Compatibility Testing (different environments)."
  },
  {
    "n": 9,
    "title": "Test Design Technique: Black-Box Testing",
    "math": "Black-box testing",
    "note": "Introduces Black-Box Testing, where the internal structure or code is unknown to the tester. The tester is only concerned with the inputs and outputs. Key techniques include Equivalence Partitioning and Boundary Value Analysis (BVA)."
  },
  {
    "n": 10,
    "title": "Test Design Technique: White-Box Testing",
    "math": "White-box testing",
    "note": "Introduces White-Box Testing, where the internal structure and code are known to the tester. It is used to test the internal logic. Key metrics include Statement Coverage and Branch Coverage to measure test thoroughness."
  },
  {
    "n": 11,
    "title": "Test Design Technique: Exploratory Testing",
    "math": "Heuristic analysis",
    "note": "Introduces Exploratory Testing as a discipline of simultaneous learning, test design, and execution. Contrasts this unscripted, experience-based approach with formal, scripted testing. Emphasizes its value in finding non-obvious bugs."
  },
  {
    "n": 12,
    "title": "Introduction to API Testing",
    "math": "Interface validation",
    "note": "Covers the fundamentals of testing Application Programming Interfaces (APIs). Explains how to test endpoints for correct status codes, request payloads, response data, and error handling using tools like Postman or automated scripts."
  },
  {
    "n": 13,
    "title": "Fundamentals of Mobile Application Testing",
    "math": "Environmental testing",
    "note": "Discusses the unique challenges of testing mobile applications. Covers testing for network conditions (WiFi, 4G/5G, offline), interruptions (calls, notifications), battery usage, gestures, and platform-specific UI/UX guidelines."
  },
  {
    "n": 14,
    "title": "Test Documentation: Test Cases and Bug Reports",
    "math": "Formal documentation",
    "note": "Details the essential documents in testing. Defines a Test Case (inputs, actions, expected results) and outlines the components of a high-quality Bug Report (title, steps to reproduce, actual vs. expected results)."
  },
  {
    "n": 15,
    "title": "Introduction to Test Automation",
    "math": "Test automation",
    "note": "Introduces Test Automation as the use of special software to control the execution of tests and compare outcomes. Explains the benefits, such as speed and repeatability, and identifies regression testing as a prime candidate for automation."
  },
  {
    "n": 16,
    "title": "The Test Automation Pyramid",
    "math": "Test automation pyramid",
    "note": "Explains the Test Automation Pyramid, a strategy model suggesting a large base of fast Unit Tests, a smaller layer of Integration Tests, and a very small layer of slow, expensive End-to-End (UI) Tests to optimize automation efforts."
  },
  {
    "n": 17,
    "title": "Agile Testing Mindset",
    "math": "Agile testing",
    "note": "Discusses how testing is adapted for Agile methodologies. Emphasizes that testing is a continuous activity performed by the whole team, focusing on preventing defects rather than just finding them later."
  },
  {
    "n": 18,
    "title": "Shift-Left and Shift-Right Approaches",
    "math": "Continuous quality",
    "note": "Explains modern testing philosophies. 'Shift-Left' involves testers earlier in the development cycle to prevent defects. 'Shift-Right' involves testing and monitoring in the production environment to get real-world feedback."
  },
  {
    "n": 19,
    "title": "Continuous Testing in DevOps",
    "math": "Continuous testing",
    "note": "Introduces Continuous Testing as a key practice in DevOps. It is the process of executing automated tests as part of the software delivery pipeline in order to obtain immediate feedback on the business risks associated with a software release candidate."
  }
]
