[
  {
    "n": 1,
    "title": "Introduction to Discrete Mathematics",
    "math": "Discrete vs. continuous mathematics",
    "note": "This section provides a formal definition of Discrete Mathematics as the study of mathematical structures that are countable or otherwise distinct and separable. It contrasts this with continuous mathematics (calculus). The importance of discrete math as the foundational language of computer science is emphasized."
  },
  {
    "n": 2,
    "title": "Propositional Logic",
    "math": "Propositional logic",
    "note": "This lesson introduces propositional logic as the study of propositions (statements that are either true or false). It covers the basic logical operators for combining propositions: Conjunction (AND), Disjunction (OR), and Negation (NOT), and the use of truth tables."
  },
  {
    "n": 3,
    "title": "Conditional Statements and Logical Equivalences",
    "math": "Logical implication, logical equivalence",
    "note": "This section introduces conditional statements (if-then) and biconditionals. It then explains logical equivalence, where two propositions have the same truth values, covering key laws like De Morgan's Laws for simplifying expressions."
  },
  {
    "n": 4,
    "title": "Predicate Logic and Quantifiers",
    "math": "Predicate logic, quantifiers",
    "note": "This section introduces Predicate Logic, an extension of propositional logic that allows for variables. It covers the Universal Quantifier ('for all', ∀) and the Existential Quantifier ('there exists', ∃) to express the extent to which a predicate is true over a domain."
  },
  {
    "n": 5,
    "title": "Introduction to Set Theory",
    "math": "Set theory",
    "note": "This lesson introduces the concept of a Set as an unordered collection of distinct objects. It covers the notation for defining sets, basic concepts like subsets and the power set, and operations like Union, Intersection, Difference, and Complement, often visualized with Venn diagrams."
  },
  {
    "n": 6,
    "title": "Functions",
    "math": "Functions",
    "note": "This lesson defines a function as a mapping from a domain to a codomain where each input has exactly one output. It covers key properties like being injective (one-to-one), surjective (onto), or bijective (a one-to-one correspondence)."
  },
  {
    "n": 7,
    "title": "Relations",
    "math": "Binary relations",
    "note": "This lesson introduces a binary relation as a more general concept than a function. It covers the key properties a relation can have: reflexivity, symmetry, and transitivity. It defines an equivalence relation as one that has all three properties."
  },
  {
    "n": 8,
    "title": "Algorithms and Big-O Notation",
    "math": "Asymptotic analysis (Big-O notation)",
    "note": "This lesson introduces the concept of an algorithm as a step-by-step procedure. It then explains Big-O notation as a way to classify algorithms according to how their run time or space requirements grow as the input size grows, focusing on the worst-case complexity."
  },
  {
    "n": 9,
    "title": "Proof Techniques",
    "math": "Mathematical proof",
    "note": "This section introduces formal mathematical proofs. It covers the Direct Proof method, Proof by Contraposition, and Proof by Contradiction, providing a framework for constructing rigorous logical arguments."
  },
  {
    "n": 10,
    "title": "Mathematical Induction",
    "math": "Mathematical induction",
    "note": "This section introduces Mathematical Induction, a powerful proof technique used to prove that a property holds for all natural numbers. It involves two steps: the Base Case and the Inductive Step."
  },
  {
    "n": 11,
    "title": "Number Theory: Divisibility and Modular Arithmetic",
    "math": "Number theory",
    "note": "This lesson introduces Number Theory, the study of the integers. It covers the concepts of divisibility, the division algorithm, and modular arithmetic, which is fundamental to cryptography and computer science."
  },
  {
    "n": 12,
    "title": "Number Theory: Primes and GCDs",
    "math": "Prime numbers, Euclidean algorithm",
    "note": "This section covers prime numbers and the Fundamental Theorem of Arithmetic. It then introduces the Greatest Common Divisor (GCD) and explains the highly efficient Euclidean Algorithm for computing the GCD of two integers."
  },
  {
    "n": 13,
    "title": "Combinatorics: Counting Principles",
    "math": "Combinatorics",
    "note": "This lesson introduces combinatorics, the study of counting. It covers the two most basic principles: the Sum Rule and the Product Rule. It also introduces the Pigeonhole Principle, which states that if n items are put into m containers, with n > m, then at least one container must contain more than one item."
  },
  {
    "n": 14,
    "title": "Combinatorics: Permutations and Combinations",
    "math": "Permutations and combinations",
    "note": "This section differentiates between two fundamental counting concepts. A Permutation is an arrangement of items where order matters. A Combination is a selection of items where order does not matter. The formulas for calculating each are derived and explained."
  },
  {
    "n": 15,
    "title": "Recurrence Relations",
    "math": "Recurrence relations",
    "note": "This lesson introduces recurrence relations as a way to define sequences recursively. It shows how to model problems like the Fibonacci sequence and discusses methods for finding an explicit formula for simple linear recurrence relations."
  },
  {
    "n": 16,
    "title": "Discrete Probability",
    "math": "Probability theory",
    "note": "This lesson covers the fundamentals of discrete probability theory. It introduces concepts like experiments, sample spaces, events, and the rules for calculating the probability of an event. The concepts of conditional probability and independence are also covered."
  },
  {
    "n": 17,
    "title": "Introduction to Graph Theory",
    "math": "Graph theory",
    "note": "This lesson introduces a graph as a mathematical structure used to model pairwise relations between objects. A graph consists of 'vertices' (nodes) and 'edges' connecting them. It covers graph terminology like degree, paths, and cycles, and the distinction between directed and undirected graphs."
  },
  {
    "n": 18,
    "title": "Graph Representation and Connectivity",
    "math": "Adjacency matrix, adjacency list",
    "note": "This section covers how to represent graphs in a computer using adjacency matrices and adjacency lists. It also formally defines connectivity in both undirected and directed graphs (strongly connected components)."
  },
  {
    "n": 19,
    "title": "Euler and Hamiltonian Paths",
    "math": "Eulerian and Hamiltonian paths",
    "note": "This lesson covers two famous problems in graph theory. An Eulerian path visits every edge exactly once. A Hamiltonian path visits each vertex exactly once. The conditions for the existence of such paths are discussed."
  },
  {
    "n": 20,
    "title": "Introduction to Trees",
    "math": "Tree data structures",
    "note": "This section defines a Tree as a special type of graph that is connected and acyclic. It covers the properties of trees and introduces concepts like rooted trees, parent-child relationships, and binary trees."
  },
  {
    "n": 21,
    "title": "Tree Traversal",
    "math": "Tree traversal algorithms",
    "note": "This lesson explains algorithms for visiting all the nodes in a rooted tree. It covers the main traversal methods: pre-order, in-order, and post-order traversal, which are fundamental to many algorithms on trees."
  },
  {
    "n": 22,
    "title": "Formal Languages and Automata",
    "math": "Automata theory",
    "note": "This final lesson provides a bridge to the theory of computation. It introduces the concept of a formal language and a Finite State Machine (or Finite Automaton) as a simple model of computation used to recognize a class of languages called regular languages. The link to regular expressions is also noted."
  }
]
